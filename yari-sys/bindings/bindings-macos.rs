/* automatically generated by rust-bindgen 0.64.0 */

#[repr(C)]
#[derive(Default)]
pub struct __IncompleteArrayField<T>(::std::marker::PhantomData<T>, [T; 0]);
impl<T> __IncompleteArrayField<T> {
    #[inline]
    pub const fn new() -> Self {
        __IncompleteArrayField(::std::marker::PhantomData, [])
    }
    #[inline]
    pub fn as_ptr(&self) -> *const T {
        self as *const _ as *const T
    }
    #[inline]
    pub fn as_mut_ptr(&mut self) -> *mut T {
        self as *mut _ as *mut T
    }
    #[inline]
    pub unsafe fn as_slice(&self, len: usize) -> &[T] {
        ::std::slice::from_raw_parts(self.as_ptr(), len)
    }
    #[inline]
    pub unsafe fn as_mut_slice(&mut self, len: usize) -> &mut [T] {
        ::std::slice::from_raw_parts_mut(self.as_mut_ptr(), len)
    }
}
impl<T> ::std::fmt::Debug for __IncompleteArrayField<T> {
    fn fmt(&self, fmt: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        fmt.write_str("__IncompleteArrayField")
    }
}
pub const YR_MAX_THREADS: u32 = 32;
pub const YR_MAX_ARENA_BUFFERS: u32 = 16;
pub const YR_MAX_COMPILER_ERROR_EXTRA_INFO: u32 = 256;
pub const YR_MAX_ATOM_LENGTH: u32 = 4;
pub const YR_MAX_ATOM_QUALITY: u32 = 255;
pub const YR_MIN_ATOM_QUALITY: u32 = 0;
pub const YR_ATOM_QUALITY_WARNING_THRESHOLD: u32 = 205;
pub const YR_ATOMS_PER_RULE_WARNING_THRESHOLD: u32 = 12000;
pub const YR_MAX_LOOP_NESTING: u32 = 4;
pub const YR_MAX_LOOP_VARS: u32 = 2;
pub const YR_MAX_INCLUDE_DEPTH: u32 = 16;
pub const YR_MAX_STRING_MATCHES: u32 = 1000000;
pub const YR_MAX_FUNCTION_ARGS: u32 = 128;
pub const YR_MAX_OVERLOADED_FUNCTIONS: u32 = 10;
pub const YR_STRING_CHAINING_THRESHOLD: u32 = 200;
pub const YR_LEX_BUF_SIZE: u32 = 8192;
pub const YR_MATCH_VERIFICATION_PROFILING_RATE: u32 = 1024;
pub const YR_RE_SCAN_LIMIT: u32 = 4096;
pub const YR_ARENA_FILE_VERSION: u32 = 19;
pub const META_TYPE_INTEGER: u32 = 1;
pub const META_TYPE_STRING: u32 = 2;
pub const META_TYPE_BOOLEAN: u32 = 3;
pub const YR_AC_SLOT_OFFSET_BITS: u32 = 9;
pub const YR_AC_MAX_TRANSITION_TABLE_SIZE: u32 = 8388608;
pub const YR_AC_ROOT_STATE: u32 = 0;
pub const YR_NAMESPACES_TABLE: u32 = 0;
pub const YR_RULES_TABLE: u32 = 1;
pub const YR_METAS_TABLE: u32 = 2;
pub const YR_STRINGS_TABLE: u32 = 3;
pub const YR_EXTERNAL_VARIABLES_TABLE: u32 = 4;
pub const YR_SZ_POOL: u32 = 5;
pub const YR_CODE_SECTION: u32 = 6;
pub const YR_RE_CODE_SECTION: u32 = 7;
pub const YR_AC_TRANSITION_TABLE: u32 = 8;
pub const YR_AC_STATE_MATCHES_TABLE: u32 = 9;
pub const YR_AC_STATE_MATCHES_POOL: u32 = 10;
pub const YR_SUMMARY_SECTION: u32 = 11;
pub const YR_NUM_SECTIONS: u32 = 12;
pub const YR_INTERNAL_LOOP_VARS: u32 = 3;
pub const ERROR_SUCCESS: u32 = 0;
pub const ERROR_INSUFICIENT_MEMORY: u32 = 1;
pub const ERROR_INSUFFICIENT_MEMORY: u32 = 1;
pub const ERROR_COULD_NOT_ATTACH_TO_PROCESS: u32 = 2;
pub const ERROR_COULD_NOT_OPEN_FILE: u32 = 3;
pub const ERROR_COULD_NOT_MAP_FILE: u32 = 4;
pub const ERROR_INVALID_FILE: u32 = 6;
pub const ERROR_CORRUPT_FILE: u32 = 7;
pub const ERROR_UNSUPPORTED_FILE_VERSION: u32 = 8;
pub const ERROR_INVALID_REGULAR_EXPRESSION: u32 = 9;
pub const ERROR_INVALID_HEX_STRING: u32 = 10;
pub const ERROR_SYNTAX_ERROR: u32 = 11;
pub const ERROR_LOOP_NESTING_LIMIT_EXCEEDED: u32 = 12;
pub const ERROR_DUPLICATED_LOOP_IDENTIFIER: u32 = 13;
pub const ERROR_DUPLICATED_IDENTIFIER: u32 = 14;
pub const ERROR_DUPLICATED_TAG_IDENTIFIER: u32 = 15;
pub const ERROR_DUPLICATED_META_IDENTIFIER: u32 = 16;
pub const ERROR_DUPLICATED_STRING_IDENTIFIER: u32 = 17;
pub const ERROR_UNREFERENCED_STRING: u32 = 18;
pub const ERROR_UNDEFINED_STRING: u32 = 19;
pub const ERROR_UNDEFINED_IDENTIFIER: u32 = 20;
pub const ERROR_MISPLACED_ANONYMOUS_STRING: u32 = 21;
pub const ERROR_INCLUDES_CIRCULAR_REFERENCE: u32 = 22;
pub const ERROR_INCLUDE_DEPTH_EXCEEDED: u32 = 23;
pub const ERROR_WRONG_TYPE: u32 = 24;
pub const ERROR_EXEC_STACK_OVERFLOW: u32 = 25;
pub const ERROR_SCAN_TIMEOUT: u32 = 26;
pub const ERROR_TOO_MANY_SCAN_THREADS: u32 = 27;
pub const ERROR_CALLBACK_ERROR: u32 = 28;
pub const ERROR_INVALID_ARGUMENT: u32 = 29;
pub const ERROR_TOO_MANY_MATCHES: u32 = 30;
pub const ERROR_INTERNAL_FATAL_ERROR: u32 = 31;
pub const ERROR_NESTED_FOR_OF_LOOP: u32 = 32;
pub const ERROR_INVALID_FIELD_NAME: u32 = 33;
pub const ERROR_UNKNOWN_MODULE: u32 = 34;
pub const ERROR_NOT_A_STRUCTURE: u32 = 35;
pub const ERROR_NOT_INDEXABLE: u32 = 36;
pub const ERROR_NOT_A_FUNCTION: u32 = 37;
pub const ERROR_INVALID_FORMAT: u32 = 38;
pub const ERROR_TOO_MANY_ARGUMENTS: u32 = 39;
pub const ERROR_WRONG_ARGUMENTS: u32 = 40;
pub const ERROR_WRONG_RETURN_TYPE: u32 = 41;
pub const ERROR_DUPLICATED_STRUCTURE_MEMBER: u32 = 42;
pub const ERROR_EMPTY_STRING: u32 = 43;
pub const ERROR_DIVISION_BY_ZERO: u32 = 44;
pub const ERROR_REGULAR_EXPRESSION_TOO_LARGE: u32 = 45;
pub const ERROR_TOO_MANY_RE_FIBERS: u32 = 46;
pub const ERROR_COULD_NOT_READ_PROCESS_MEMORY: u32 = 47;
pub const ERROR_INVALID_EXTERNAL_VARIABLE_TYPE: u32 = 48;
pub const ERROR_REGULAR_EXPRESSION_TOO_COMPLEX: u32 = 49;
pub const ERROR_INVALID_MODULE_NAME: u32 = 50;
pub const ERROR_TOO_MANY_STRINGS: u32 = 51;
pub const ERROR_INTEGER_OVERFLOW: u32 = 52;
pub const ERROR_CALLBACK_REQUIRED: u32 = 53;
pub const ERROR_INVALID_OPERAND: u32 = 54;
pub const ERROR_COULD_NOT_READ_FILE: u32 = 55;
pub const ERROR_DUPLICATED_EXTERNAL_VARIABLE: u32 = 56;
pub const ERROR_INVALID_MODULE_DATA: u32 = 57;
pub const ERROR_WRITING_FILE: u32 = 58;
pub const ERROR_INVALID_MODIFIER: u32 = 59;
pub const ERROR_DUPLICATED_MODIFIER: u32 = 60;
pub const ERROR_BLOCK_NOT_READY: u32 = 61;
pub const ERROR_INVALID_PERCENTAGE: u32 = 62;
pub const ERROR_IDENTIFIER_MATCHES_WILDCARD: u32 = 63;
pub const YR_MAJOR_VERSION: u32 = 4;
pub const YR_MINOR_VERSION: u32 = 2;
pub const YR_MICRO_VERSION: u32 = 3;
pub const YR_VERSION_HEX: u32 = 262659;
pub const YR_PARANOID_EXEC: u32 = 1;
pub const CALLBACK_MSG_RULE_MATCHING: u32 = 1;
pub const CALLBACK_MSG_RULE_NOT_MATCHING: u32 = 2;
pub const CALLBACK_MSG_SCAN_FINISHED: u32 = 3;
pub const CALLBACK_MSG_IMPORT_MODULE: u32 = 4;
pub const CALLBACK_MSG_MODULE_IMPORTED: u32 = 5;
pub const CALLBACK_MSG_TOO_MANY_MATCHES: u32 = 6;
pub const CALLBACK_MSG_CONSOLE_LOG: u32 = 7;
pub const YR_UNDEFINED: i64 = -1483400188077313;
pub const OBJECT_TYPE_INTEGER: u32 = 1;
pub const OBJECT_TYPE_STRING: u32 = 2;
pub const OBJECT_TYPE_STRUCTURE: u32 = 3;
pub const OBJECT_TYPE_ARRAY: u32 = 4;
pub const OBJECT_TYPE_FUNCTION: u32 = 5;
pub const OBJECT_TYPE_DICTIONARY: u32 = 6;
pub const OBJECT_TYPE_FLOAT: u32 = 7;
pub type jmp_buf = [::std::os::raw::c_int; 48usize];
pub type __int64_t = ::std::os::raw::c_longlong;
pub type __darwin_va_list = __builtin_va_list;
pub type __darwin_off_t = __int64_t;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __darwin_pthread_handler_rec {
    pub __routine: ::std::option::Option<unsafe extern "C" fn(arg1: *mut ::std::os::raw::c_void)>,
    pub __arg: *mut ::std::os::raw::c_void,
    pub __next: *mut __darwin_pthread_handler_rec,
}
#[test]
fn bindgen_test_layout___darwin_pthread_handler_rec() {
    const UNINIT: ::std::mem::MaybeUninit<__darwin_pthread_handler_rec> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<__darwin_pthread_handler_rec>(),
        24usize,
        concat!("Size of: ", stringify!(__darwin_pthread_handler_rec))
    );
    assert_eq!(
        ::std::mem::align_of::<__darwin_pthread_handler_rec>(),
        8usize,
        concat!("Alignment of ", stringify!(__darwin_pthread_handler_rec))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).__routine) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__darwin_pthread_handler_rec),
            "::",
            stringify!(__routine)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).__arg) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(__darwin_pthread_handler_rec),
            "::",
            stringify!(__arg)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).__next) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(__darwin_pthread_handler_rec),
            "::",
            stringify!(__next)
        )
    );
}
impl Default for __darwin_pthread_handler_rec {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _opaque_pthread_mutex_t {
    pub __sig: ::std::os::raw::c_long,
    pub __opaque: [::std::os::raw::c_char; 56usize],
}
#[test]
fn bindgen_test_layout__opaque_pthread_mutex_t() {
    const UNINIT: ::std::mem::MaybeUninit<_opaque_pthread_mutex_t> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<_opaque_pthread_mutex_t>(),
        64usize,
        concat!("Size of: ", stringify!(_opaque_pthread_mutex_t))
    );
    assert_eq!(
        ::std::mem::align_of::<_opaque_pthread_mutex_t>(),
        8usize,
        concat!("Alignment of ", stringify!(_opaque_pthread_mutex_t))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).__sig) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_opaque_pthread_mutex_t),
            "::",
            stringify!(__sig)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).__opaque) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(_opaque_pthread_mutex_t),
            "::",
            stringify!(__opaque)
        )
    );
}
impl Default for _opaque_pthread_mutex_t {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _opaque_pthread_t {
    pub __sig: ::std::os::raw::c_long,
    pub __cleanup_stack: *mut __darwin_pthread_handler_rec,
    pub __opaque: [::std::os::raw::c_char; 8176usize],
}
#[test]
fn bindgen_test_layout__opaque_pthread_t() {
    const UNINIT: ::std::mem::MaybeUninit<_opaque_pthread_t> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<_opaque_pthread_t>(),
        8192usize,
        concat!("Size of: ", stringify!(_opaque_pthread_t))
    );
    assert_eq!(
        ::std::mem::align_of::<_opaque_pthread_t>(),
        8usize,
        concat!("Alignment of ", stringify!(_opaque_pthread_t))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).__sig) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_opaque_pthread_t),
            "::",
            stringify!(__sig)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).__cleanup_stack) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(_opaque_pthread_t),
            "::",
            stringify!(__cleanup_stack)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).__opaque) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(_opaque_pthread_t),
            "::",
            stringify!(__opaque)
        )
    );
}
impl Default for _opaque_pthread_t {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
pub type __darwin_pthread_key_t = ::std::os::raw::c_ulong;
pub type __darwin_pthread_mutex_t = _opaque_pthread_mutex_t;
pub type __darwin_pthread_t = *mut _opaque_pthread_t;
pub type va_list = __darwin_va_list;
pub type fpos_t = __darwin_off_t;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __sbuf {
    pub _base: *mut ::std::os::raw::c_uchar,
    pub _size: ::std::os::raw::c_int,
}
#[test]
fn bindgen_test_layout___sbuf() {
    const UNINIT: ::std::mem::MaybeUninit<__sbuf> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<__sbuf>(),
        16usize,
        concat!("Size of: ", stringify!(__sbuf))
    );
    assert_eq!(
        ::std::mem::align_of::<__sbuf>(),
        8usize,
        concat!("Alignment of ", stringify!(__sbuf))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr)._base) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__sbuf),
            "::",
            stringify!(_base)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr)._size) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(__sbuf),
            "::",
            stringify!(_size)
        )
    );
}
impl Default for __sbuf {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __sFILEX {
    _unused: [u8; 0],
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __sFILE {
    pub _p: *mut ::std::os::raw::c_uchar,
    pub _r: ::std::os::raw::c_int,
    pub _w: ::std::os::raw::c_int,
    pub _flags: ::std::os::raw::c_short,
    pub _file: ::std::os::raw::c_short,
    pub _bf: __sbuf,
    pub _lbfsize: ::std::os::raw::c_int,
    pub _cookie: *mut ::std::os::raw::c_void,
    pub _close: ::std::option::Option<
        unsafe extern "C" fn(arg1: *mut ::std::os::raw::c_void) -> ::std::os::raw::c_int,
    >,
    pub _read: ::std::option::Option<
        unsafe extern "C" fn(
            arg1: *mut ::std::os::raw::c_void,
            arg2: *mut ::std::os::raw::c_char,
            arg3: ::std::os::raw::c_int,
        ) -> ::std::os::raw::c_int,
    >,
    pub _seek: ::std::option::Option<
        unsafe extern "C" fn(
            arg1: *mut ::std::os::raw::c_void,
            arg2: fpos_t,
            arg3: ::std::os::raw::c_int,
        ) -> fpos_t,
    >,
    pub _write: ::std::option::Option<
        unsafe extern "C" fn(
            arg1: *mut ::std::os::raw::c_void,
            arg2: *const ::std::os::raw::c_char,
            arg3: ::std::os::raw::c_int,
        ) -> ::std::os::raw::c_int,
    >,
    pub _ub: __sbuf,
    pub _extra: *mut __sFILEX,
    pub _ur: ::std::os::raw::c_int,
    pub _ubuf: [::std::os::raw::c_uchar; 3usize],
    pub _nbuf: [::std::os::raw::c_uchar; 1usize],
    pub _lb: __sbuf,
    pub _blksize: ::std::os::raw::c_int,
    pub _offset: fpos_t,
}
#[test]
fn bindgen_test_layout___sFILE() {
    const UNINIT: ::std::mem::MaybeUninit<__sFILE> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<__sFILE>(),
        152usize,
        concat!("Size of: ", stringify!(__sFILE))
    );
    assert_eq!(
        ::std::mem::align_of::<__sFILE>(),
        8usize,
        concat!("Alignment of ", stringify!(__sFILE))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr)._p) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__sFILE),
            "::",
            stringify!(_p)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr)._r) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(__sFILE),
            "::",
            stringify!(_r)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr)._w) as usize - ptr as usize },
        12usize,
        concat!(
            "Offset of field: ",
            stringify!(__sFILE),
            "::",
            stringify!(_w)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr)._flags) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(__sFILE),
            "::",
            stringify!(_flags)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr)._file) as usize - ptr as usize },
        18usize,
        concat!(
            "Offset of field: ",
            stringify!(__sFILE),
            "::",
            stringify!(_file)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr)._bf) as usize - ptr as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(__sFILE),
            "::",
            stringify!(_bf)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr)._lbfsize) as usize - ptr as usize },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(__sFILE),
            "::",
            stringify!(_lbfsize)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr)._cookie) as usize - ptr as usize },
        48usize,
        concat!(
            "Offset of field: ",
            stringify!(__sFILE),
            "::",
            stringify!(_cookie)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr)._close) as usize - ptr as usize },
        56usize,
        concat!(
            "Offset of field: ",
            stringify!(__sFILE),
            "::",
            stringify!(_close)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr)._read) as usize - ptr as usize },
        64usize,
        concat!(
            "Offset of field: ",
            stringify!(__sFILE),
            "::",
            stringify!(_read)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr)._seek) as usize - ptr as usize },
        72usize,
        concat!(
            "Offset of field: ",
            stringify!(__sFILE),
            "::",
            stringify!(_seek)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr)._write) as usize - ptr as usize },
        80usize,
        concat!(
            "Offset of field: ",
            stringify!(__sFILE),
            "::",
            stringify!(_write)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr)._ub) as usize - ptr as usize },
        88usize,
        concat!(
            "Offset of field: ",
            stringify!(__sFILE),
            "::",
            stringify!(_ub)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr)._extra) as usize - ptr as usize },
        104usize,
        concat!(
            "Offset of field: ",
            stringify!(__sFILE),
            "::",
            stringify!(_extra)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr)._ur) as usize - ptr as usize },
        112usize,
        concat!(
            "Offset of field: ",
            stringify!(__sFILE),
            "::",
            stringify!(_ur)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr)._ubuf) as usize - ptr as usize },
        116usize,
        concat!(
            "Offset of field: ",
            stringify!(__sFILE),
            "::",
            stringify!(_ubuf)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr)._nbuf) as usize - ptr as usize },
        119usize,
        concat!(
            "Offset of field: ",
            stringify!(__sFILE),
            "::",
            stringify!(_nbuf)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr)._lb) as usize - ptr as usize },
        120usize,
        concat!(
            "Offset of field: ",
            stringify!(__sFILE),
            "::",
            stringify!(_lb)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr)._blksize) as usize - ptr as usize },
        136usize,
        concat!(
            "Offset of field: ",
            stringify!(__sFILE),
            "::",
            stringify!(_blksize)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr)._offset) as usize - ptr as usize },
        144usize,
        concat!(
            "Offset of field: ",
            stringify!(__sFILE),
            "::",
            stringify!(_offset)
        )
    );
}
impl Default for __sFILE {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
pub type FILE = __sFILE;
extern "C" {
    pub fn yr_isalnum(s: *const u8) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn yr_vasprintf(
        strp: *mut *mut ::std::os::raw::c_char,
        fmt: *const ::std::os::raw::c_char,
        ap: va_list,
    );
}
extern "C" {
    pub fn yr_asprintf(
        strp: *mut *mut ::std::os::raw::c_char,
        fmt: *const ::std::os::raw::c_char,
        ...
    );
}
pub type YR_STREAM_READ_FUNC = ::std::option::Option<
    unsafe extern "C" fn(
        ptr: *mut ::std::os::raw::c_void,
        size: usize,
        count: usize,
        user_data: *mut ::std::os::raw::c_void,
    ) -> usize,
>;
pub type YR_STREAM_WRITE_FUNC = ::std::option::Option<
    unsafe extern "C" fn(
        ptr: *const ::std::os::raw::c_void,
        size: usize,
        count: usize,
        user_data: *mut ::std::os::raw::c_void,
    ) -> usize,
>;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _YR_STREAM {
    pub user_data: *mut ::std::os::raw::c_void,
    pub read: YR_STREAM_READ_FUNC,
    pub write: YR_STREAM_WRITE_FUNC,
}
#[test]
fn bindgen_test_layout__YR_STREAM() {
    const UNINIT: ::std::mem::MaybeUninit<_YR_STREAM> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<_YR_STREAM>(),
        24usize,
        concat!("Size of: ", stringify!(_YR_STREAM))
    );
    assert_eq!(
        ::std::mem::align_of::<_YR_STREAM>(),
        8usize,
        concat!("Alignment of ", stringify!(_YR_STREAM))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).user_data) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_YR_STREAM),
            "::",
            stringify!(user_data)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).read) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(_YR_STREAM),
            "::",
            stringify!(read)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).write) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(_YR_STREAM),
            "::",
            stringify!(write)
        )
    );
}
impl Default for _YR_STREAM {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
pub type YR_STREAM = _YR_STREAM;
extern "C" {
    pub fn yr_stream_read(
        ptr: *mut ::std::os::raw::c_void,
        size: usize,
        count: usize,
        stream: *mut YR_STREAM,
    ) -> usize;
}
extern "C" {
    pub fn yr_stream_write(
        ptr: *const ::std::os::raw::c_void,
        size: usize,
        count: usize,
        stream: *mut YR_STREAM,
    ) -> usize;
}
pub type yr_arena_off_t = u32;
#[repr(C)]
#[derive(Debug, Default, Copy, Clone)]
pub struct YR_ARENA_REF {
    pub buffer_id: u32,
    pub offset: yr_arena_off_t,
}
#[test]
fn bindgen_test_layout_YR_ARENA_REF() {
    const UNINIT: ::std::mem::MaybeUninit<YR_ARENA_REF> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<YR_ARENA_REF>(),
        8usize,
        concat!("Size of: ", stringify!(YR_ARENA_REF))
    );
    assert_eq!(
        ::std::mem::align_of::<YR_ARENA_REF>(),
        4usize,
        concat!("Alignment of ", stringify!(YR_ARENA_REF))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).buffer_id) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(YR_ARENA_REF),
            "::",
            stringify!(buffer_id)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).offset) as usize - ptr as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(YR_ARENA_REF),
            "::",
            stringify!(offset)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct YR_ARENA_BUFFER {
    pub data: *mut u8,
    pub size: usize,
    pub used: usize,
}
#[test]
fn bindgen_test_layout_YR_ARENA_BUFFER() {
    const UNINIT: ::std::mem::MaybeUninit<YR_ARENA_BUFFER> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<YR_ARENA_BUFFER>(),
        24usize,
        concat!("Size of: ", stringify!(YR_ARENA_BUFFER))
    );
    assert_eq!(
        ::std::mem::align_of::<YR_ARENA_BUFFER>(),
        8usize,
        concat!("Alignment of ", stringify!(YR_ARENA_BUFFER))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).data) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(YR_ARENA_BUFFER),
            "::",
            stringify!(data)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).size) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(YR_ARENA_BUFFER),
            "::",
            stringify!(size)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).used) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(YR_ARENA_BUFFER),
            "::",
            stringify!(used)
        )
    );
}
impl Default for YR_ARENA_BUFFER {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct YR_RELOC {
    pub buffer_id: u32,
    pub offset: yr_arena_off_t,
    pub next: *mut YR_RELOC,
}
#[test]
fn bindgen_test_layout_YR_RELOC() {
    const UNINIT: ::std::mem::MaybeUninit<YR_RELOC> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<YR_RELOC>(),
        16usize,
        concat!("Size of: ", stringify!(YR_RELOC))
    );
    assert_eq!(
        ::std::mem::align_of::<YR_RELOC>(),
        8usize,
        concat!("Alignment of ", stringify!(YR_RELOC))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).buffer_id) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(YR_RELOC),
            "::",
            stringify!(buffer_id)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).offset) as usize - ptr as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(YR_RELOC),
            "::",
            stringify!(offset)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).next) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(YR_RELOC),
            "::",
            stringify!(next)
        )
    );
}
impl Default for YR_RELOC {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct YR_ARENA {
    pub xrefs: u32,
    pub num_buffers: u32,
    pub buffers: [YR_ARENA_BUFFER; 16usize],
    pub initial_buffer_size: usize,
    pub reloc_list_head: *mut YR_RELOC,
    pub reloc_list_tail: *mut YR_RELOC,
}
#[test]
fn bindgen_test_layout_YR_ARENA() {
    const UNINIT: ::std::mem::MaybeUninit<YR_ARENA> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<YR_ARENA>(),
        416usize,
        concat!("Size of: ", stringify!(YR_ARENA))
    );
    assert_eq!(
        ::std::mem::align_of::<YR_ARENA>(),
        8usize,
        concat!("Alignment of ", stringify!(YR_ARENA))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).xrefs) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(YR_ARENA),
            "::",
            stringify!(xrefs)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).num_buffers) as usize - ptr as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(YR_ARENA),
            "::",
            stringify!(num_buffers)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).buffers) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(YR_ARENA),
            "::",
            stringify!(buffers)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).initial_buffer_size) as usize - ptr as usize },
        392usize,
        concat!(
            "Offset of field: ",
            stringify!(YR_ARENA),
            "::",
            stringify!(initial_buffer_size)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).reloc_list_head) as usize - ptr as usize },
        400usize,
        concat!(
            "Offset of field: ",
            stringify!(YR_ARENA),
            "::",
            stringify!(reloc_list_head)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).reloc_list_tail) as usize - ptr as usize },
        408usize,
        concat!(
            "Offset of field: ",
            stringify!(YR_ARENA),
            "::",
            stringify!(reloc_list_tail)
        )
    );
}
impl Default for YR_ARENA {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
extern "C" {
    pub fn yr_arena_create(
        num_buffers: u32,
        initial_buffer_size: usize,
        arena: *mut *mut YR_ARENA,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn yr_arena_acquire(arena: *mut YR_ARENA);
}
extern "C" {
    pub fn yr_arena_release(arena: *mut YR_ARENA) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn yr_arena_ref_to_ptr(
        arena: *mut YR_ARENA,
        ref_: *mut YR_ARENA_REF,
    ) -> *mut ::std::os::raw::c_void;
}
extern "C" {
    pub fn yr_arena_ptr_to_ref(
        arena: *mut YR_ARENA,
        address: *const ::std::os::raw::c_void,
        ref_: *mut YR_ARENA_REF,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn yr_arena_get_ptr(
        arena: *mut YR_ARENA,
        buffer_id: u32,
        offset: yr_arena_off_t,
    ) -> *mut ::std::os::raw::c_void;
}
extern "C" {
    pub fn yr_arena_get_current_offset(arena: *mut YR_ARENA, buffer_id: u32) -> yr_arena_off_t;
}
extern "C" {
    pub fn yr_arena_allocate_memory(
        arena: *mut YR_ARENA,
        buffer_id: u32,
        size: usize,
        ref_: *mut YR_ARENA_REF,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn yr_arena_allocate_zeroed_memory(
        arena: *mut YR_ARENA,
        buffer_id: u32,
        size: usize,
        ref_: *mut YR_ARENA_REF,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn yr_arena_allocate_struct(
        arena: *mut YR_ARENA,
        buffer_id: u32,
        size: usize,
        ref_: *mut YR_ARENA_REF,
        ...
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn yr_arena_make_ptr_relocatable(
        arena: *mut YR_ARENA,
        buffer_id: u32,
        ...
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn yr_arena_write_data(
        arena: *mut YR_ARENA,
        buffer_id: u32,
        data: *const ::std::os::raw::c_void,
        size: usize,
        ref_: *mut YR_ARENA_REF,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn yr_arena_write_string(
        arena: *mut YR_ARENA,
        buffer_id: u32,
        string: *const ::std::os::raw::c_char,
        ref_: *mut YR_ARENA_REF,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn yr_arena_write_uint32(
        arena: *mut YR_ARENA,
        buffer_id: u32,
        integer: u32,
        ref_: *mut YR_ARENA_REF,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn yr_arena_load_stream(
        stream: *mut YR_STREAM,
        arena: *mut *mut YR_ARENA,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn yr_arena_save_stream(
        arena: *mut YR_ARENA,
        stream: *mut YR_STREAM,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn yr_bitmask_find_non_colliding_offset(
        a: *mut ::std::os::raw::c_ulong,
        b: *mut ::std::os::raw::c_ulong,
        len_a: u32,
        len_b: u32,
        off_a: *mut u32,
    ) -> u32;
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _YR_HASH_TABLE_ENTRY {
    pub key: *mut ::std::os::raw::c_void,
    pub key_length: usize,
    pub ns: *mut ::std::os::raw::c_char,
    pub value: *mut ::std::os::raw::c_void,
    pub next: *mut _YR_HASH_TABLE_ENTRY,
}
#[test]
fn bindgen_test_layout__YR_HASH_TABLE_ENTRY() {
    const UNINIT: ::std::mem::MaybeUninit<_YR_HASH_TABLE_ENTRY> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<_YR_HASH_TABLE_ENTRY>(),
        40usize,
        concat!("Size of: ", stringify!(_YR_HASH_TABLE_ENTRY))
    );
    assert_eq!(
        ::std::mem::align_of::<_YR_HASH_TABLE_ENTRY>(),
        8usize,
        concat!("Alignment of ", stringify!(_YR_HASH_TABLE_ENTRY))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).key) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_YR_HASH_TABLE_ENTRY),
            "::",
            stringify!(key)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).key_length) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(_YR_HASH_TABLE_ENTRY),
            "::",
            stringify!(key_length)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).ns) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(_YR_HASH_TABLE_ENTRY),
            "::",
            stringify!(ns)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).value) as usize - ptr as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(_YR_HASH_TABLE_ENTRY),
            "::",
            stringify!(value)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).next) as usize - ptr as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(_YR_HASH_TABLE_ENTRY),
            "::",
            stringify!(next)
        )
    );
}
impl Default for _YR_HASH_TABLE_ENTRY {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
pub type YR_HASH_TABLE_ENTRY = _YR_HASH_TABLE_ENTRY;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _YR_HASH_TABLE {
    pub size: ::std::os::raw::c_int,
    pub buckets: [*mut YR_HASH_TABLE_ENTRY; 1usize],
}
#[test]
fn bindgen_test_layout__YR_HASH_TABLE() {
    const UNINIT: ::std::mem::MaybeUninit<_YR_HASH_TABLE> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<_YR_HASH_TABLE>(),
        16usize,
        concat!("Size of: ", stringify!(_YR_HASH_TABLE))
    );
    assert_eq!(
        ::std::mem::align_of::<_YR_HASH_TABLE>(),
        8usize,
        concat!("Alignment of ", stringify!(_YR_HASH_TABLE))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).size) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_YR_HASH_TABLE),
            "::",
            stringify!(size)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).buckets) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(_YR_HASH_TABLE),
            "::",
            stringify!(buckets)
        )
    );
}
impl Default for _YR_HASH_TABLE {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
pub type YR_HASH_TABLE = _YR_HASH_TABLE;
pub type YR_HASH_TABLE_FREE_VALUE_FUNC = ::std::option::Option<
    unsafe extern "C" fn(value: *mut ::std::os::raw::c_void) -> ::std::os::raw::c_int,
>;
pub type YR_HASH_TABLE_ITERATE_FUNC = ::std::option::Option<
    unsafe extern "C" fn(
        key: *mut ::std::os::raw::c_void,
        key_length: usize,
        value: *mut ::std::os::raw::c_void,
        data: *mut ::std::os::raw::c_void,
    ) -> ::std::os::raw::c_int,
>;
extern "C" {
    pub fn yr_hash(seed: u32, buffer: *const ::std::os::raw::c_void, len: usize) -> u32;
}
extern "C" {
    pub fn yr_hash_table_create(
        size: ::std::os::raw::c_int,
        table: *mut *mut YR_HASH_TABLE,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn yr_hash_table_clean(
        table: *mut YR_HASH_TABLE,
        free_value: YR_HASH_TABLE_FREE_VALUE_FUNC,
    );
}
extern "C" {
    pub fn yr_hash_table_destroy(
        table: *mut YR_HASH_TABLE,
        free_value: YR_HASH_TABLE_FREE_VALUE_FUNC,
    );
}
extern "C" {
    pub fn yr_hash_table_iterate(
        table: *mut YR_HASH_TABLE,
        ns: *const ::std::os::raw::c_char,
        iterate_func: YR_HASH_TABLE_ITERATE_FUNC,
        data: *mut ::std::os::raw::c_void,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn yr_hash_table_lookup(
        table: *mut YR_HASH_TABLE,
        key: *const ::std::os::raw::c_char,
        ns: *const ::std::os::raw::c_char,
    ) -> *mut ::std::os::raw::c_void;
}
extern "C" {
    pub fn yr_hash_table_remove(
        table: *mut YR_HASH_TABLE,
        key: *const ::std::os::raw::c_char,
        ns: *const ::std::os::raw::c_char,
    ) -> *mut ::std::os::raw::c_void;
}
extern "C" {
    pub fn yr_hash_table_add(
        table: *mut YR_HASH_TABLE,
        key: *const ::std::os::raw::c_char,
        ns: *const ::std::os::raw::c_char,
        value: *mut ::std::os::raw::c_void,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn yr_hash_table_add_uint32(
        table: *mut YR_HASH_TABLE,
        key: *const ::std::os::raw::c_char,
        ns: *const ::std::os::raw::c_char,
        value: u32,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn yr_hash_table_lookup_uint32(
        table: *mut YR_HASH_TABLE,
        key: *const ::std::os::raw::c_char,
        ns: *const ::std::os::raw::c_char,
    ) -> u32;
}
extern "C" {
    pub fn yr_hash_table_lookup_raw_key(
        table: *mut YR_HASH_TABLE,
        key: *const ::std::os::raw::c_void,
        key_length: usize,
        ns: *const ::std::os::raw::c_char,
    ) -> *mut ::std::os::raw::c_void;
}
extern "C" {
    pub fn yr_hash_table_remove_raw_key(
        table: *mut YR_HASH_TABLE,
        key: *const ::std::os::raw::c_void,
        key_length: usize,
        ns: *const ::std::os::raw::c_char,
    ) -> *mut ::std::os::raw::c_void;
}
extern "C" {
    pub fn yr_hash_table_add_raw_key(
        table: *mut YR_HASH_TABLE,
        key: *const ::std::os::raw::c_void,
        key_length: usize,
        ns: *const ::std::os::raw::c_char,
        value: *mut ::std::os::raw::c_void,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn yr_hash_table_add_uint32_raw_key(
        table: *mut YR_HASH_TABLE,
        key: *const ::std::os::raw::c_void,
        key_length: usize,
        ns: *const ::std::os::raw::c_char,
        value: u32,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn yr_hash_table_lookup_uint32_raw_key(
        table: *mut YR_HASH_TABLE,
        key: *const ::std::os::raw::c_void,
        key_length: usize,
        ns: *const ::std::os::raw::c_char,
    ) -> u32;
}
#[repr(C)]
#[derive(Debug, Default, Copy, Clone)]
pub struct mach_timebase_info {
    pub numer: u32,
    pub denom: u32,
}
#[test]
fn bindgen_test_layout_mach_timebase_info() {
    const UNINIT: ::std::mem::MaybeUninit<mach_timebase_info> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<mach_timebase_info>(),
        8usize,
        concat!("Size of: ", stringify!(mach_timebase_info))
    );
    assert_eq!(
        ::std::mem::align_of::<mach_timebase_info>(),
        4usize,
        concat!("Alignment of ", stringify!(mach_timebase_info))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).numer) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(mach_timebase_info),
            "::",
            stringify!(numer)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).denom) as usize - ptr as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(mach_timebase_info),
            "::",
            stringify!(denom)
        )
    );
}
pub type mach_timebase_info_data_t = mach_timebase_info;
#[repr(C)]
#[derive(Debug, Default, Copy, Clone)]
pub struct _YR_STOPWATCH {
    pub timebase: mach_timebase_info_data_t,
    pub start: u64,
}
#[test]
fn bindgen_test_layout__YR_STOPWATCH() {
    const UNINIT: ::std::mem::MaybeUninit<_YR_STOPWATCH> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<_YR_STOPWATCH>(),
        16usize,
        concat!("Size of: ", stringify!(_YR_STOPWATCH))
    );
    assert_eq!(
        ::std::mem::align_of::<_YR_STOPWATCH>(),
        8usize,
        concat!("Alignment of ", stringify!(_YR_STOPWATCH))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).timebase) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_YR_STOPWATCH),
            "::",
            stringify!(timebase)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).start) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(_YR_STOPWATCH),
            "::",
            stringify!(start)
        )
    );
}
pub type YR_STOPWATCH = _YR_STOPWATCH;
extern "C" {
    pub fn yr_stopwatch_start(stopwatch: *mut YR_STOPWATCH);
}
extern "C" {
    pub fn yr_stopwatch_elapsed_ns(stopwatch: *mut YR_STOPWATCH) -> u64;
}
pub type pthread_key_t = __darwin_pthread_key_t;
pub type pthread_mutex_t = __darwin_pthread_mutex_t;
pub type pthread_t = __darwin_pthread_t;
pub type YR_THREAD_ID = pthread_t;
pub type YR_THREAD_STORAGE_KEY = pthread_key_t;
pub type YR_MUTEX = pthread_mutex_t;
extern "C" {
    pub fn yr_current_thread_id() -> YR_THREAD_ID;
}
extern "C" {
    pub fn yr_mutex_create(arg1: *mut YR_MUTEX) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn yr_mutex_destroy(arg1: *mut YR_MUTEX) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn yr_mutex_lock(arg1: *mut YR_MUTEX) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn yr_mutex_unlock(arg1: *mut YR_MUTEX) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn yr_thread_storage_create(arg1: *mut YR_THREAD_STORAGE_KEY) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn yr_thread_storage_destroy(arg1: *mut YR_THREAD_STORAGE_KEY) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn yr_thread_storage_set_value(
        arg1: *mut YR_THREAD_STORAGE_KEY,
        arg2: *mut ::std::os::raw::c_void,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn yr_thread_storage_get_value(
        arg1: *mut YR_THREAD_STORAGE_KEY,
    ) -> *mut ::std::os::raw::c_void;
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct YR_NOTEBOOK {
    _unused: [u8; 0],
}
extern "C" {
    pub fn yr_notebook_create(
        page_size: usize,
        pool: *mut *mut YR_NOTEBOOK,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn yr_notebook_destroy(pool: *mut YR_NOTEBOOK) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn yr_notebook_alloc(
        notebook: *mut YR_NOTEBOOK,
        size: usize,
    ) -> *mut ::std::os::raw::c_void;
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct YR_AC_TABLES {
    _unused: [u8; 0],
}
pub type YR_AC_TRANSITION = u32;
#[repr(C)]
#[derive(Copy, Clone)]
pub struct YR_NAMESPACE {
    pub __bindgen_anon_1: YR_NAMESPACE__bindgen_ty_1,
    pub idx: u32,
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union YR_NAMESPACE__bindgen_ty_1 {
    pub name: *const ::std::os::raw::c_char,
    pub name_: YR_ARENA_REF,
}
#[test]
fn bindgen_test_layout_YR_NAMESPACE__bindgen_ty_1() {
    const UNINIT: ::std::mem::MaybeUninit<YR_NAMESPACE__bindgen_ty_1> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<YR_NAMESPACE__bindgen_ty_1>(),
        8usize,
        concat!("Size of: ", stringify!(YR_NAMESPACE__bindgen_ty_1))
    );
    assert_eq!(
        ::std::mem::align_of::<YR_NAMESPACE__bindgen_ty_1>(),
        8usize,
        concat!("Alignment of ", stringify!(YR_NAMESPACE__bindgen_ty_1))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).name) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(YR_NAMESPACE__bindgen_ty_1),
            "::",
            stringify!(name)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).name_) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(YR_NAMESPACE__bindgen_ty_1),
            "::",
            stringify!(name_)
        )
    );
}
impl Default for YR_NAMESPACE__bindgen_ty_1 {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[test]
fn bindgen_test_layout_YR_NAMESPACE() {
    const UNINIT: ::std::mem::MaybeUninit<YR_NAMESPACE> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<YR_NAMESPACE>(),
        16usize,
        concat!("Size of: ", stringify!(YR_NAMESPACE))
    );
    assert_eq!(
        ::std::mem::align_of::<YR_NAMESPACE>(),
        8usize,
        concat!("Alignment of ", stringify!(YR_NAMESPACE))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).idx) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(YR_NAMESPACE),
            "::",
            stringify!(idx)
        )
    );
}
impl Default for YR_NAMESPACE {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct YR_META {
    pub __bindgen_anon_1: YR_META__bindgen_ty_1,
    pub __bindgen_anon_2: YR_META__bindgen_ty_2,
    pub integer: i64,
    pub type_: i32,
    pub flags: i32,
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union YR_META__bindgen_ty_1 {
    pub identifier: *const ::std::os::raw::c_char,
    pub identifier_: YR_ARENA_REF,
}
#[test]
fn bindgen_test_layout_YR_META__bindgen_ty_1() {
    const UNINIT: ::std::mem::MaybeUninit<YR_META__bindgen_ty_1> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<YR_META__bindgen_ty_1>(),
        8usize,
        concat!("Size of: ", stringify!(YR_META__bindgen_ty_1))
    );
    assert_eq!(
        ::std::mem::align_of::<YR_META__bindgen_ty_1>(),
        8usize,
        concat!("Alignment of ", stringify!(YR_META__bindgen_ty_1))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).identifier) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(YR_META__bindgen_ty_1),
            "::",
            stringify!(identifier)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).identifier_) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(YR_META__bindgen_ty_1),
            "::",
            stringify!(identifier_)
        )
    );
}
impl Default for YR_META__bindgen_ty_1 {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union YR_META__bindgen_ty_2 {
    pub string: *const ::std::os::raw::c_char,
    pub string_: YR_ARENA_REF,
}
#[test]
fn bindgen_test_layout_YR_META__bindgen_ty_2() {
    const UNINIT: ::std::mem::MaybeUninit<YR_META__bindgen_ty_2> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<YR_META__bindgen_ty_2>(),
        8usize,
        concat!("Size of: ", stringify!(YR_META__bindgen_ty_2))
    );
    assert_eq!(
        ::std::mem::align_of::<YR_META__bindgen_ty_2>(),
        8usize,
        concat!("Alignment of ", stringify!(YR_META__bindgen_ty_2))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).string) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(YR_META__bindgen_ty_2),
            "::",
            stringify!(string)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).string_) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(YR_META__bindgen_ty_2),
            "::",
            stringify!(string_)
        )
    );
}
impl Default for YR_META__bindgen_ty_2 {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[test]
fn bindgen_test_layout_YR_META() {
    const UNINIT: ::std::mem::MaybeUninit<YR_META> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<YR_META>(),
        32usize,
        concat!("Size of: ", stringify!(YR_META))
    );
    assert_eq!(
        ::std::mem::align_of::<YR_META>(),
        8usize,
        concat!("Alignment of ", stringify!(YR_META))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).integer) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(YR_META),
            "::",
            stringify!(integer)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).type_) as usize - ptr as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(YR_META),
            "::",
            stringify!(type_)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).flags) as usize - ptr as usize },
        28usize,
        concat!(
            "Offset of field: ",
            stringify!(YR_META),
            "::",
            stringify!(flags)
        )
    );
}
impl Default for YR_META {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct YR_STRING {
    pub flags: u32,
    pub idx: u32,
    pub fixed_offset: i64,
    pub rule_idx: u32,
    pub length: i32,
    pub __bindgen_anon_1: YR_STRING__bindgen_ty_1,
    pub __bindgen_anon_2: YR_STRING__bindgen_ty_2,
    pub chain_gap_min: i32,
    pub chain_gap_max: i32,
    pub __bindgen_anon_3: YR_STRING__bindgen_ty_3,
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union YR_STRING__bindgen_ty_1 {
    pub string: *mut u8,
    pub string_: YR_ARENA_REF,
}
#[test]
fn bindgen_test_layout_YR_STRING__bindgen_ty_1() {
    const UNINIT: ::std::mem::MaybeUninit<YR_STRING__bindgen_ty_1> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<YR_STRING__bindgen_ty_1>(),
        8usize,
        concat!("Size of: ", stringify!(YR_STRING__bindgen_ty_1))
    );
    assert_eq!(
        ::std::mem::align_of::<YR_STRING__bindgen_ty_1>(),
        8usize,
        concat!("Alignment of ", stringify!(YR_STRING__bindgen_ty_1))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).string) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(YR_STRING__bindgen_ty_1),
            "::",
            stringify!(string)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).string_) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(YR_STRING__bindgen_ty_1),
            "::",
            stringify!(string_)
        )
    );
}
impl Default for YR_STRING__bindgen_ty_1 {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union YR_STRING__bindgen_ty_2 {
    pub chained_to: *mut YR_STRING,
    pub chained_to_: YR_ARENA_REF,
}
#[test]
fn bindgen_test_layout_YR_STRING__bindgen_ty_2() {
    const UNINIT: ::std::mem::MaybeUninit<YR_STRING__bindgen_ty_2> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<YR_STRING__bindgen_ty_2>(),
        8usize,
        concat!("Size of: ", stringify!(YR_STRING__bindgen_ty_2))
    );
    assert_eq!(
        ::std::mem::align_of::<YR_STRING__bindgen_ty_2>(),
        8usize,
        concat!("Alignment of ", stringify!(YR_STRING__bindgen_ty_2))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).chained_to) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(YR_STRING__bindgen_ty_2),
            "::",
            stringify!(chained_to)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).chained_to_) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(YR_STRING__bindgen_ty_2),
            "::",
            stringify!(chained_to_)
        )
    );
}
impl Default for YR_STRING__bindgen_ty_2 {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union YR_STRING__bindgen_ty_3 {
    pub identifier: *const ::std::os::raw::c_char,
    pub identifier_: YR_ARENA_REF,
}
#[test]
fn bindgen_test_layout_YR_STRING__bindgen_ty_3() {
    const UNINIT: ::std::mem::MaybeUninit<YR_STRING__bindgen_ty_3> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<YR_STRING__bindgen_ty_3>(),
        8usize,
        concat!("Size of: ", stringify!(YR_STRING__bindgen_ty_3))
    );
    assert_eq!(
        ::std::mem::align_of::<YR_STRING__bindgen_ty_3>(),
        8usize,
        concat!("Alignment of ", stringify!(YR_STRING__bindgen_ty_3))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).identifier) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(YR_STRING__bindgen_ty_3),
            "::",
            stringify!(identifier)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).identifier_) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(YR_STRING__bindgen_ty_3),
            "::",
            stringify!(identifier_)
        )
    );
}
impl Default for YR_STRING__bindgen_ty_3 {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[test]
fn bindgen_test_layout_YR_STRING() {
    const UNINIT: ::std::mem::MaybeUninit<YR_STRING> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<YR_STRING>(),
        56usize,
        concat!("Size of: ", stringify!(YR_STRING))
    );
    assert_eq!(
        ::std::mem::align_of::<YR_STRING>(),
        8usize,
        concat!("Alignment of ", stringify!(YR_STRING))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).flags) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(YR_STRING),
            "::",
            stringify!(flags)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).idx) as usize - ptr as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(YR_STRING),
            "::",
            stringify!(idx)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).fixed_offset) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(YR_STRING),
            "::",
            stringify!(fixed_offset)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).rule_idx) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(YR_STRING),
            "::",
            stringify!(rule_idx)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).length) as usize - ptr as usize },
        20usize,
        concat!(
            "Offset of field: ",
            stringify!(YR_STRING),
            "::",
            stringify!(length)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).chain_gap_min) as usize - ptr as usize },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(YR_STRING),
            "::",
            stringify!(chain_gap_min)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).chain_gap_max) as usize - ptr as usize },
        44usize,
        concat!(
            "Offset of field: ",
            stringify!(YR_STRING),
            "::",
            stringify!(chain_gap_max)
        )
    );
}
impl Default for YR_STRING {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct YR_RULE {
    pub flags: i32,
    pub num_atoms: i32,
    pub __bindgen_anon_1: YR_RULE__bindgen_ty_1,
    pub __bindgen_anon_2: YR_RULE__bindgen_ty_2,
    pub __bindgen_anon_3: YR_RULE__bindgen_ty_3,
    pub __bindgen_anon_4: YR_RULE__bindgen_ty_4,
    pub __bindgen_anon_5: YR_RULE__bindgen_ty_5,
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union YR_RULE__bindgen_ty_1 {
    pub identifier: *const ::std::os::raw::c_char,
    pub identifier_: YR_ARENA_REF,
}
#[test]
fn bindgen_test_layout_YR_RULE__bindgen_ty_1() {
    const UNINIT: ::std::mem::MaybeUninit<YR_RULE__bindgen_ty_1> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<YR_RULE__bindgen_ty_1>(),
        8usize,
        concat!("Size of: ", stringify!(YR_RULE__bindgen_ty_1))
    );
    assert_eq!(
        ::std::mem::align_of::<YR_RULE__bindgen_ty_1>(),
        8usize,
        concat!("Alignment of ", stringify!(YR_RULE__bindgen_ty_1))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).identifier) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(YR_RULE__bindgen_ty_1),
            "::",
            stringify!(identifier)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).identifier_) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(YR_RULE__bindgen_ty_1),
            "::",
            stringify!(identifier_)
        )
    );
}
impl Default for YR_RULE__bindgen_ty_1 {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union YR_RULE__bindgen_ty_2 {
    pub tags: *const ::std::os::raw::c_char,
    pub tags_: YR_ARENA_REF,
}
#[test]
fn bindgen_test_layout_YR_RULE__bindgen_ty_2() {
    const UNINIT: ::std::mem::MaybeUninit<YR_RULE__bindgen_ty_2> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<YR_RULE__bindgen_ty_2>(),
        8usize,
        concat!("Size of: ", stringify!(YR_RULE__bindgen_ty_2))
    );
    assert_eq!(
        ::std::mem::align_of::<YR_RULE__bindgen_ty_2>(),
        8usize,
        concat!("Alignment of ", stringify!(YR_RULE__bindgen_ty_2))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).tags) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(YR_RULE__bindgen_ty_2),
            "::",
            stringify!(tags)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).tags_) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(YR_RULE__bindgen_ty_2),
            "::",
            stringify!(tags_)
        )
    );
}
impl Default for YR_RULE__bindgen_ty_2 {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union YR_RULE__bindgen_ty_3 {
    pub metas: *mut YR_META,
    pub metas_: YR_ARENA_REF,
}
#[test]
fn bindgen_test_layout_YR_RULE__bindgen_ty_3() {
    const UNINIT: ::std::mem::MaybeUninit<YR_RULE__bindgen_ty_3> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<YR_RULE__bindgen_ty_3>(),
        8usize,
        concat!("Size of: ", stringify!(YR_RULE__bindgen_ty_3))
    );
    assert_eq!(
        ::std::mem::align_of::<YR_RULE__bindgen_ty_3>(),
        8usize,
        concat!("Alignment of ", stringify!(YR_RULE__bindgen_ty_3))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).metas) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(YR_RULE__bindgen_ty_3),
            "::",
            stringify!(metas)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).metas_) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(YR_RULE__bindgen_ty_3),
            "::",
            stringify!(metas_)
        )
    );
}
impl Default for YR_RULE__bindgen_ty_3 {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union YR_RULE__bindgen_ty_4 {
    pub strings: *mut YR_STRING,
    pub strings_: YR_ARENA_REF,
}
#[test]
fn bindgen_test_layout_YR_RULE__bindgen_ty_4() {
    const UNINIT: ::std::mem::MaybeUninit<YR_RULE__bindgen_ty_4> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<YR_RULE__bindgen_ty_4>(),
        8usize,
        concat!("Size of: ", stringify!(YR_RULE__bindgen_ty_4))
    );
    assert_eq!(
        ::std::mem::align_of::<YR_RULE__bindgen_ty_4>(),
        8usize,
        concat!("Alignment of ", stringify!(YR_RULE__bindgen_ty_4))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).strings) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(YR_RULE__bindgen_ty_4),
            "::",
            stringify!(strings)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).strings_) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(YR_RULE__bindgen_ty_4),
            "::",
            stringify!(strings_)
        )
    );
}
impl Default for YR_RULE__bindgen_ty_4 {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union YR_RULE__bindgen_ty_5 {
    pub ns: *mut YR_NAMESPACE,
    pub ns_: YR_ARENA_REF,
}
#[test]
fn bindgen_test_layout_YR_RULE__bindgen_ty_5() {
    const UNINIT: ::std::mem::MaybeUninit<YR_RULE__bindgen_ty_5> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<YR_RULE__bindgen_ty_5>(),
        8usize,
        concat!("Size of: ", stringify!(YR_RULE__bindgen_ty_5))
    );
    assert_eq!(
        ::std::mem::align_of::<YR_RULE__bindgen_ty_5>(),
        8usize,
        concat!("Alignment of ", stringify!(YR_RULE__bindgen_ty_5))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).ns) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(YR_RULE__bindgen_ty_5),
            "::",
            stringify!(ns)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).ns_) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(YR_RULE__bindgen_ty_5),
            "::",
            stringify!(ns_)
        )
    );
}
impl Default for YR_RULE__bindgen_ty_5 {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[test]
fn bindgen_test_layout_YR_RULE() {
    const UNINIT: ::std::mem::MaybeUninit<YR_RULE> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<YR_RULE>(),
        48usize,
        concat!("Size of: ", stringify!(YR_RULE))
    );
    assert_eq!(
        ::std::mem::align_of::<YR_RULE>(),
        8usize,
        concat!("Alignment of ", stringify!(YR_RULE))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).flags) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(YR_RULE),
            "::",
            stringify!(flags)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).num_atoms) as usize - ptr as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(YR_RULE),
            "::",
            stringify!(num_atoms)
        )
    );
}
impl Default for YR_RULE {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C)]
#[derive(Debug, Default, Copy, Clone)]
pub struct YR_SUMMARY {
    pub num_rules: u32,
    pub num_strings: u32,
    pub num_namespaces: u32,
}
#[test]
fn bindgen_test_layout_YR_SUMMARY() {
    const UNINIT: ::std::mem::MaybeUninit<YR_SUMMARY> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<YR_SUMMARY>(),
        12usize,
        concat!("Size of: ", stringify!(YR_SUMMARY))
    );
    assert_eq!(
        ::std::mem::align_of::<YR_SUMMARY>(),
        4usize,
        concat!("Alignment of ", stringify!(YR_SUMMARY))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).num_rules) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(YR_SUMMARY),
            "::",
            stringify!(num_rules)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).num_strings) as usize - ptr as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(YR_SUMMARY),
            "::",
            stringify!(num_strings)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).num_namespaces) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(YR_SUMMARY),
            "::",
            stringify!(num_namespaces)
        )
    );
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct YR_EXTERNAL_VARIABLE {
    pub type_: i32,
    pub value: YR_EXTERNAL_VARIABLE__bindgen_ty_1,
    pub __bindgen_anon_1: YR_EXTERNAL_VARIABLE__bindgen_ty_2,
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union YR_EXTERNAL_VARIABLE__bindgen_ty_1 {
    pub i: i64,
    pub f: f64,
    pub s: *mut ::std::os::raw::c_char,
}
#[test]
fn bindgen_test_layout_YR_EXTERNAL_VARIABLE__bindgen_ty_1() {
    const UNINIT: ::std::mem::MaybeUninit<YR_EXTERNAL_VARIABLE__bindgen_ty_1> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<YR_EXTERNAL_VARIABLE__bindgen_ty_1>(),
        8usize,
        concat!("Size of: ", stringify!(YR_EXTERNAL_VARIABLE__bindgen_ty_1))
    );
    assert_eq!(
        ::std::mem::align_of::<YR_EXTERNAL_VARIABLE__bindgen_ty_1>(),
        8usize,
        concat!(
            "Alignment of ",
            stringify!(YR_EXTERNAL_VARIABLE__bindgen_ty_1)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).i) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(YR_EXTERNAL_VARIABLE__bindgen_ty_1),
            "::",
            stringify!(i)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).f) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(YR_EXTERNAL_VARIABLE__bindgen_ty_1),
            "::",
            stringify!(f)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).s) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(YR_EXTERNAL_VARIABLE__bindgen_ty_1),
            "::",
            stringify!(s)
        )
    );
}
impl Default for YR_EXTERNAL_VARIABLE__bindgen_ty_1 {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union YR_EXTERNAL_VARIABLE__bindgen_ty_2 {
    pub identifier: *const ::std::os::raw::c_char,
    pub identifier_: YR_ARENA_REF,
}
#[test]
fn bindgen_test_layout_YR_EXTERNAL_VARIABLE__bindgen_ty_2() {
    const UNINIT: ::std::mem::MaybeUninit<YR_EXTERNAL_VARIABLE__bindgen_ty_2> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<YR_EXTERNAL_VARIABLE__bindgen_ty_2>(),
        8usize,
        concat!("Size of: ", stringify!(YR_EXTERNAL_VARIABLE__bindgen_ty_2))
    );
    assert_eq!(
        ::std::mem::align_of::<YR_EXTERNAL_VARIABLE__bindgen_ty_2>(),
        8usize,
        concat!(
            "Alignment of ",
            stringify!(YR_EXTERNAL_VARIABLE__bindgen_ty_2)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).identifier) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(YR_EXTERNAL_VARIABLE__bindgen_ty_2),
            "::",
            stringify!(identifier)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).identifier_) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(YR_EXTERNAL_VARIABLE__bindgen_ty_2),
            "::",
            stringify!(identifier_)
        )
    );
}
impl Default for YR_EXTERNAL_VARIABLE__bindgen_ty_2 {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[test]
fn bindgen_test_layout_YR_EXTERNAL_VARIABLE() {
    const UNINIT: ::std::mem::MaybeUninit<YR_EXTERNAL_VARIABLE> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<YR_EXTERNAL_VARIABLE>(),
        24usize,
        concat!("Size of: ", stringify!(YR_EXTERNAL_VARIABLE))
    );
    assert_eq!(
        ::std::mem::align_of::<YR_EXTERNAL_VARIABLE>(),
        8usize,
        concat!("Alignment of ", stringify!(YR_EXTERNAL_VARIABLE))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).type_) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(YR_EXTERNAL_VARIABLE),
            "::",
            stringify!(type_)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).value) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(YR_EXTERNAL_VARIABLE),
            "::",
            stringify!(value)
        )
    );
}
impl Default for YR_EXTERNAL_VARIABLE {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct YR_AC_MATCH {
    pub __bindgen_anon_1: YR_AC_MATCH__bindgen_ty_1,
    pub __bindgen_anon_2: YR_AC_MATCH__bindgen_ty_2,
    pub __bindgen_anon_3: YR_AC_MATCH__bindgen_ty_3,
    pub __bindgen_anon_4: YR_AC_MATCH__bindgen_ty_4,
    pub backtrack: u16,
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union YR_AC_MATCH__bindgen_ty_1 {
    pub string: *mut YR_STRING,
    pub string_: YR_ARENA_REF,
}
#[test]
fn bindgen_test_layout_YR_AC_MATCH__bindgen_ty_1() {
    const UNINIT: ::std::mem::MaybeUninit<YR_AC_MATCH__bindgen_ty_1> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<YR_AC_MATCH__bindgen_ty_1>(),
        8usize,
        concat!("Size of: ", stringify!(YR_AC_MATCH__bindgen_ty_1))
    );
    assert_eq!(
        ::std::mem::align_of::<YR_AC_MATCH__bindgen_ty_1>(),
        8usize,
        concat!("Alignment of ", stringify!(YR_AC_MATCH__bindgen_ty_1))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).string) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(YR_AC_MATCH__bindgen_ty_1),
            "::",
            stringify!(string)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).string_) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(YR_AC_MATCH__bindgen_ty_1),
            "::",
            stringify!(string_)
        )
    );
}
impl Default for YR_AC_MATCH__bindgen_ty_1 {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union YR_AC_MATCH__bindgen_ty_2 {
    pub forward_code: *const u8,
    pub forward_code_: YR_ARENA_REF,
}
#[test]
fn bindgen_test_layout_YR_AC_MATCH__bindgen_ty_2() {
    const UNINIT: ::std::mem::MaybeUninit<YR_AC_MATCH__bindgen_ty_2> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<YR_AC_MATCH__bindgen_ty_2>(),
        8usize,
        concat!("Size of: ", stringify!(YR_AC_MATCH__bindgen_ty_2))
    );
    assert_eq!(
        ::std::mem::align_of::<YR_AC_MATCH__bindgen_ty_2>(),
        8usize,
        concat!("Alignment of ", stringify!(YR_AC_MATCH__bindgen_ty_2))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).forward_code) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(YR_AC_MATCH__bindgen_ty_2),
            "::",
            stringify!(forward_code)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).forward_code_) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(YR_AC_MATCH__bindgen_ty_2),
            "::",
            stringify!(forward_code_)
        )
    );
}
impl Default for YR_AC_MATCH__bindgen_ty_2 {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union YR_AC_MATCH__bindgen_ty_3 {
    pub backward_code: *const u8,
    pub backward_code_: YR_ARENA_REF,
}
#[test]
fn bindgen_test_layout_YR_AC_MATCH__bindgen_ty_3() {
    const UNINIT: ::std::mem::MaybeUninit<YR_AC_MATCH__bindgen_ty_3> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<YR_AC_MATCH__bindgen_ty_3>(),
        8usize,
        concat!("Size of: ", stringify!(YR_AC_MATCH__bindgen_ty_3))
    );
    assert_eq!(
        ::std::mem::align_of::<YR_AC_MATCH__bindgen_ty_3>(),
        8usize,
        concat!("Alignment of ", stringify!(YR_AC_MATCH__bindgen_ty_3))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).backward_code) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(YR_AC_MATCH__bindgen_ty_3),
            "::",
            stringify!(backward_code)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).backward_code_) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(YR_AC_MATCH__bindgen_ty_3),
            "::",
            stringify!(backward_code_)
        )
    );
}
impl Default for YR_AC_MATCH__bindgen_ty_3 {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union YR_AC_MATCH__bindgen_ty_4 {
    pub next: *mut YR_AC_MATCH,
    pub next_: YR_ARENA_REF,
}
#[test]
fn bindgen_test_layout_YR_AC_MATCH__bindgen_ty_4() {
    const UNINIT: ::std::mem::MaybeUninit<YR_AC_MATCH__bindgen_ty_4> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<YR_AC_MATCH__bindgen_ty_4>(),
        8usize,
        concat!("Size of: ", stringify!(YR_AC_MATCH__bindgen_ty_4))
    );
    assert_eq!(
        ::std::mem::align_of::<YR_AC_MATCH__bindgen_ty_4>(),
        8usize,
        concat!("Alignment of ", stringify!(YR_AC_MATCH__bindgen_ty_4))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).next) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(YR_AC_MATCH__bindgen_ty_4),
            "::",
            stringify!(next)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).next_) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(YR_AC_MATCH__bindgen_ty_4),
            "::",
            stringify!(next_)
        )
    );
}
impl Default for YR_AC_MATCH__bindgen_ty_4 {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[test]
fn bindgen_test_layout_YR_AC_MATCH() {
    const UNINIT: ::std::mem::MaybeUninit<YR_AC_MATCH> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<YR_AC_MATCH>(),
        40usize,
        concat!("Size of: ", stringify!(YR_AC_MATCH))
    );
    assert_eq!(
        ::std::mem::align_of::<YR_AC_MATCH>(),
        8usize,
        concat!("Alignment of ", stringify!(YR_AC_MATCH))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).backtrack) as usize - ptr as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(YR_AC_MATCH),
            "::",
            stringify!(backtrack)
        )
    );
}
impl Default for YR_AC_MATCH {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct RE_NODE {
    pub type_: ::std::os::raw::c_int,
    pub __bindgen_anon_1: RE_NODE__bindgen_ty_1,
    pub __bindgen_anon_2: RE_NODE__bindgen_ty_2,
    pub greedy: ::std::os::raw::c_int,
    pub re_class: *mut RE_CLASS,
    pub children_head: *mut RE_NODE,
    pub children_tail: *mut RE_NODE,
    pub prev_sibling: *mut RE_NODE,
    pub next_sibling: *mut RE_NODE,
    pub forward_code_ref: YR_ARENA_REF,
    pub backward_code_ref: YR_ARENA_REF,
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union RE_NODE__bindgen_ty_1 {
    pub value: ::std::os::raw::c_int,
    pub count: ::std::os::raw::c_int,
    pub start: ::std::os::raw::c_int,
}
#[test]
fn bindgen_test_layout_RE_NODE__bindgen_ty_1() {
    const UNINIT: ::std::mem::MaybeUninit<RE_NODE__bindgen_ty_1> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<RE_NODE__bindgen_ty_1>(),
        4usize,
        concat!("Size of: ", stringify!(RE_NODE__bindgen_ty_1))
    );
    assert_eq!(
        ::std::mem::align_of::<RE_NODE__bindgen_ty_1>(),
        4usize,
        concat!("Alignment of ", stringify!(RE_NODE__bindgen_ty_1))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).value) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(RE_NODE__bindgen_ty_1),
            "::",
            stringify!(value)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).count) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(RE_NODE__bindgen_ty_1),
            "::",
            stringify!(count)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).start) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(RE_NODE__bindgen_ty_1),
            "::",
            stringify!(start)
        )
    );
}
impl Default for RE_NODE__bindgen_ty_1 {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union RE_NODE__bindgen_ty_2 {
    pub mask: ::std::os::raw::c_int,
    pub end: ::std::os::raw::c_int,
}
#[test]
fn bindgen_test_layout_RE_NODE__bindgen_ty_2() {
    const UNINIT: ::std::mem::MaybeUninit<RE_NODE__bindgen_ty_2> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<RE_NODE__bindgen_ty_2>(),
        4usize,
        concat!("Size of: ", stringify!(RE_NODE__bindgen_ty_2))
    );
    assert_eq!(
        ::std::mem::align_of::<RE_NODE__bindgen_ty_2>(),
        4usize,
        concat!("Alignment of ", stringify!(RE_NODE__bindgen_ty_2))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).mask) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(RE_NODE__bindgen_ty_2),
            "::",
            stringify!(mask)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).end) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(RE_NODE__bindgen_ty_2),
            "::",
            stringify!(end)
        )
    );
}
impl Default for RE_NODE__bindgen_ty_2 {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[test]
fn bindgen_test_layout_RE_NODE() {
    const UNINIT: ::std::mem::MaybeUninit<RE_NODE> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<RE_NODE>(),
        72usize,
        concat!("Size of: ", stringify!(RE_NODE))
    );
    assert_eq!(
        ::std::mem::align_of::<RE_NODE>(),
        8usize,
        concat!("Alignment of ", stringify!(RE_NODE))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).type_) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(RE_NODE),
            "::",
            stringify!(type_)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).greedy) as usize - ptr as usize },
        12usize,
        concat!(
            "Offset of field: ",
            stringify!(RE_NODE),
            "::",
            stringify!(greedy)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).re_class) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(RE_NODE),
            "::",
            stringify!(re_class)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).children_head) as usize - ptr as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(RE_NODE),
            "::",
            stringify!(children_head)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).children_tail) as usize - ptr as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(RE_NODE),
            "::",
            stringify!(children_tail)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).prev_sibling) as usize - ptr as usize },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(RE_NODE),
            "::",
            stringify!(prev_sibling)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).next_sibling) as usize - ptr as usize },
        48usize,
        concat!(
            "Offset of field: ",
            stringify!(RE_NODE),
            "::",
            stringify!(next_sibling)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).forward_code_ref) as usize - ptr as usize },
        56usize,
        concat!(
            "Offset of field: ",
            stringify!(RE_NODE),
            "::",
            stringify!(forward_code_ref)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).backward_code_ref) as usize - ptr as usize },
        64usize,
        concat!(
            "Offset of field: ",
            stringify!(RE_NODE),
            "::",
            stringify!(backward_code_ref)
        )
    );
}
impl Default for RE_NODE {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C)]
#[derive(Debug, Default, Copy, Clone)]
pub struct RE_CLASS {
    pub negated: u8,
    pub bitmap: [u8; 32usize],
}
#[test]
fn bindgen_test_layout_RE_CLASS() {
    const UNINIT: ::std::mem::MaybeUninit<RE_CLASS> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<RE_CLASS>(),
        33usize,
        concat!("Size of: ", stringify!(RE_CLASS))
    );
    assert_eq!(
        ::std::mem::align_of::<RE_CLASS>(),
        1usize,
        concat!("Alignment of ", stringify!(RE_CLASS))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).negated) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(RE_CLASS),
            "::",
            stringify!(negated)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).bitmap) as usize - ptr as usize },
        1usize,
        concat!(
            "Offset of field: ",
            stringify!(RE_CLASS),
            "::",
            stringify!(bitmap)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct RE_AST {
    pub flags: u32,
    pub root_node: *mut RE_NODE,
}
#[test]
fn bindgen_test_layout_RE_AST() {
    const UNINIT: ::std::mem::MaybeUninit<RE_AST> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<RE_AST>(),
        16usize,
        concat!("Size of: ", stringify!(RE_AST))
    );
    assert_eq!(
        ::std::mem::align_of::<RE_AST>(),
        8usize,
        concat!("Alignment of ", stringify!(RE_AST))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).flags) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(RE_AST),
            "::",
            stringify!(flags)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).root_node) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(RE_AST),
            "::",
            stringify!(root_node)
        )
    );
}
impl Default for RE_AST {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C, packed)]
pub struct RE {
    pub flags: u32,
    pub code: __IncompleteArrayField<u8>,
}
#[test]
fn bindgen_test_layout_RE() {
    const UNINIT: ::std::mem::MaybeUninit<RE> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<RE>(),
        4usize,
        concat!("Size of: ", stringify!(RE))
    );
    assert_eq!(
        ::std::mem::align_of::<RE>(),
        1usize,
        concat!("Alignment of ", stringify!(RE))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).flags) as usize - ptr as usize },
        0usize,
        concat!("Offset of field: ", stringify!(RE), "::", stringify!(flags))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).code) as usize - ptr as usize },
        4usize,
        concat!("Offset of field: ", stringify!(RE), "::", stringify!(code))
    );
}
impl Default for RE {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct RE_ERROR {
    pub message: [::std::os::raw::c_char; 384usize],
}
#[test]
fn bindgen_test_layout_RE_ERROR() {
    const UNINIT: ::std::mem::MaybeUninit<RE_ERROR> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<RE_ERROR>(),
        384usize,
        concat!("Size of: ", stringify!(RE_ERROR))
    );
    assert_eq!(
        ::std::mem::align_of::<RE_ERROR>(),
        1usize,
        concat!("Alignment of ", stringify!(RE_ERROR))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).message) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(RE_ERROR),
            "::",
            stringify!(message)
        )
    );
}
impl Default for RE_ERROR {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct RE_FIBER {
    pub ip: *const u8,
    pub sp: i32,
    pub rc: i32,
    pub prev: *mut RE_FIBER,
    pub next: *mut RE_FIBER,
    pub stack: [u16; 1024usize],
}
#[test]
fn bindgen_test_layout_RE_FIBER() {
    const UNINIT: ::std::mem::MaybeUninit<RE_FIBER> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<RE_FIBER>(),
        2080usize,
        concat!("Size of: ", stringify!(RE_FIBER))
    );
    assert_eq!(
        ::std::mem::align_of::<RE_FIBER>(),
        8usize,
        concat!("Alignment of ", stringify!(RE_FIBER))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).ip) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(RE_FIBER),
            "::",
            stringify!(ip)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).sp) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(RE_FIBER),
            "::",
            stringify!(sp)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).rc) as usize - ptr as usize },
        12usize,
        concat!(
            "Offset of field: ",
            stringify!(RE_FIBER),
            "::",
            stringify!(rc)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).prev) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(RE_FIBER),
            "::",
            stringify!(prev)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).next) as usize - ptr as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(RE_FIBER),
            "::",
            stringify!(next)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).stack) as usize - ptr as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(RE_FIBER),
            "::",
            stringify!(stack)
        )
    );
}
impl Default for RE_FIBER {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct RE_FIBER_LIST {
    pub head: *mut RE_FIBER,
    pub tail: *mut RE_FIBER,
}
#[test]
fn bindgen_test_layout_RE_FIBER_LIST() {
    const UNINIT: ::std::mem::MaybeUninit<RE_FIBER_LIST> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<RE_FIBER_LIST>(),
        16usize,
        concat!("Size of: ", stringify!(RE_FIBER_LIST))
    );
    assert_eq!(
        ::std::mem::align_of::<RE_FIBER_LIST>(),
        8usize,
        concat!("Alignment of ", stringify!(RE_FIBER_LIST))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).head) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(RE_FIBER_LIST),
            "::",
            stringify!(head)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).tail) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(RE_FIBER_LIST),
            "::",
            stringify!(tail)
        )
    );
}
impl Default for RE_FIBER_LIST {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct RE_FIBER_POOL {
    pub fiber_count: ::std::os::raw::c_int,
    pub fibers: RE_FIBER_LIST,
}
#[test]
fn bindgen_test_layout_RE_FIBER_POOL() {
    const UNINIT: ::std::mem::MaybeUninit<RE_FIBER_POOL> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<RE_FIBER_POOL>(),
        24usize,
        concat!("Size of: ", stringify!(RE_FIBER_POOL))
    );
    assert_eq!(
        ::std::mem::align_of::<RE_FIBER_POOL>(),
        8usize,
        concat!("Alignment of ", stringify!(RE_FIBER_POOL))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).fiber_count) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(RE_FIBER_POOL),
            "::",
            stringify!(fiber_count)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).fibers) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(RE_FIBER_POOL),
            "::",
            stringify!(fibers)
        )
    );
}
impl Default for RE_FIBER_POOL {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct RE_FAST_EXEC_POSITION {
    pub round: ::std::os::raw::c_int,
    pub input: *const u8,
    pub prev: *mut RE_FAST_EXEC_POSITION,
    pub next: *mut RE_FAST_EXEC_POSITION,
}
#[test]
fn bindgen_test_layout_RE_FAST_EXEC_POSITION() {
    const UNINIT: ::std::mem::MaybeUninit<RE_FAST_EXEC_POSITION> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<RE_FAST_EXEC_POSITION>(),
        32usize,
        concat!("Size of: ", stringify!(RE_FAST_EXEC_POSITION))
    );
    assert_eq!(
        ::std::mem::align_of::<RE_FAST_EXEC_POSITION>(),
        8usize,
        concat!("Alignment of ", stringify!(RE_FAST_EXEC_POSITION))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).round) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(RE_FAST_EXEC_POSITION),
            "::",
            stringify!(round)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).input) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(RE_FAST_EXEC_POSITION),
            "::",
            stringify!(input)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).prev) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(RE_FAST_EXEC_POSITION),
            "::",
            stringify!(prev)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).next) as usize - ptr as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(RE_FAST_EXEC_POSITION),
            "::",
            stringify!(next)
        )
    );
}
impl Default for RE_FAST_EXEC_POSITION {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct RE_FAST_EXEC_POSITION_POOL {
    pub head: *mut RE_FAST_EXEC_POSITION,
}
#[test]
fn bindgen_test_layout_RE_FAST_EXEC_POSITION_POOL() {
    const UNINIT: ::std::mem::MaybeUninit<RE_FAST_EXEC_POSITION_POOL> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<RE_FAST_EXEC_POSITION_POOL>(),
        8usize,
        concat!("Size of: ", stringify!(RE_FAST_EXEC_POSITION_POOL))
    );
    assert_eq!(
        ::std::mem::align_of::<RE_FAST_EXEC_POSITION_POOL>(),
        8usize,
        concat!("Alignment of ", stringify!(RE_FAST_EXEC_POSITION_POOL))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).head) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(RE_FAST_EXEC_POSITION_POOL),
            "::",
            stringify!(head)
        )
    );
}
impl Default for RE_FAST_EXEC_POSITION_POOL {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct YR_MODIFIER {
    pub flags: i32,
    pub xor_min: u8,
    pub xor_max: u8,
    pub alphabet: *mut SIZED_STRING,
}
#[test]
fn bindgen_test_layout_YR_MODIFIER() {
    const UNINIT: ::std::mem::MaybeUninit<YR_MODIFIER> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<YR_MODIFIER>(),
        16usize,
        concat!("Size of: ", stringify!(YR_MODIFIER))
    );
    assert_eq!(
        ::std::mem::align_of::<YR_MODIFIER>(),
        8usize,
        concat!("Alignment of ", stringify!(YR_MODIFIER))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).flags) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(YR_MODIFIER),
            "::",
            stringify!(flags)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).xor_min) as usize - ptr as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(YR_MODIFIER),
            "::",
            stringify!(xor_min)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).xor_max) as usize - ptr as usize },
        5usize,
        concat!(
            "Offset of field: ",
            stringify!(YR_MODIFIER),
            "::",
            stringify!(xor_max)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).alphabet) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(YR_MODIFIER),
            "::",
            stringify!(alphabet)
        )
    );
}
impl Default for YR_MODIFIER {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct YR_MATCHES {
    pub head: *mut YR_MATCH,
    pub tail: *mut YR_MATCH,
    pub count: i32,
}
#[test]
fn bindgen_test_layout_YR_MATCHES() {
    const UNINIT: ::std::mem::MaybeUninit<YR_MATCHES> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<YR_MATCHES>(),
        24usize,
        concat!("Size of: ", stringify!(YR_MATCHES))
    );
    assert_eq!(
        ::std::mem::align_of::<YR_MATCHES>(),
        8usize,
        concat!("Alignment of ", stringify!(YR_MATCHES))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).head) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(YR_MATCHES),
            "::",
            stringify!(head)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).tail) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(YR_MATCHES),
            "::",
            stringify!(tail)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).count) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(YR_MATCHES),
            "::",
            stringify!(count)
        )
    );
}
impl Default for YR_MATCHES {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct YR_MATCH {
    pub base: i64,
    pub offset: i64,
    pub match_length: i32,
    pub data_length: i32,
    pub data: *const u8,
    pub prev: *mut YR_MATCH,
    pub next: *mut YR_MATCH,
    pub chain_length: i32,
    pub is_private: bool,
}
#[test]
fn bindgen_test_layout_YR_MATCH() {
    const UNINIT: ::std::mem::MaybeUninit<YR_MATCH> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<YR_MATCH>(),
        56usize,
        concat!("Size of: ", stringify!(YR_MATCH))
    );
    assert_eq!(
        ::std::mem::align_of::<YR_MATCH>(),
        8usize,
        concat!("Alignment of ", stringify!(YR_MATCH))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).base) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(YR_MATCH),
            "::",
            stringify!(base)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).offset) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(YR_MATCH),
            "::",
            stringify!(offset)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).match_length) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(YR_MATCH),
            "::",
            stringify!(match_length)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).data_length) as usize - ptr as usize },
        20usize,
        concat!(
            "Offset of field: ",
            stringify!(YR_MATCH),
            "::",
            stringify!(data_length)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).data) as usize - ptr as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(YR_MATCH),
            "::",
            stringify!(data)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).prev) as usize - ptr as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(YR_MATCH),
            "::",
            stringify!(prev)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).next) as usize - ptr as usize },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(YR_MATCH),
            "::",
            stringify!(next)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).chain_length) as usize - ptr as usize },
        48usize,
        concat!(
            "Offset of field: ",
            stringify!(YR_MATCH),
            "::",
            stringify!(chain_length)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).is_private) as usize - ptr as usize },
        52usize,
        concat!(
            "Offset of field: ",
            stringify!(YR_MATCH),
            "::",
            stringify!(is_private)
        )
    );
}
impl Default for YR_MATCH {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct YR_AC_STATE {
    pub failure: *mut YR_AC_STATE,
    pub first_child: *mut YR_AC_STATE,
    pub siblings: *mut YR_AC_STATE,
    pub matches_ref: YR_ARENA_REF,
    pub depth: u8,
    pub input: u8,
    pub t_table_slot: u32,
}
#[test]
fn bindgen_test_layout_YR_AC_STATE() {
    const UNINIT: ::std::mem::MaybeUninit<YR_AC_STATE> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<YR_AC_STATE>(),
        40usize,
        concat!("Size of: ", stringify!(YR_AC_STATE))
    );
    assert_eq!(
        ::std::mem::align_of::<YR_AC_STATE>(),
        8usize,
        concat!("Alignment of ", stringify!(YR_AC_STATE))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).failure) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(YR_AC_STATE),
            "::",
            stringify!(failure)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).first_child) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(YR_AC_STATE),
            "::",
            stringify!(first_child)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).siblings) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(YR_AC_STATE),
            "::",
            stringify!(siblings)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).matches_ref) as usize - ptr as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(YR_AC_STATE),
            "::",
            stringify!(matches_ref)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).depth) as usize - ptr as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(YR_AC_STATE),
            "::",
            stringify!(depth)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).input) as usize - ptr as usize },
        33usize,
        concat!(
            "Offset of field: ",
            stringify!(YR_AC_STATE),
            "::",
            stringify!(input)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).t_table_slot) as usize - ptr as usize },
        36usize,
        concat!(
            "Offset of field: ",
            stringify!(YR_AC_STATE),
            "::",
            stringify!(t_table_slot)
        )
    );
}
impl Default for YR_AC_STATE {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct YR_AC_MATCH_LIST_ENTRY {
    pub backtrack: u16,
    pub string_idx: u32,
    pub ref_: YR_ARENA_REF,
    pub forward_code_ref: YR_ARENA_REF,
    pub backward_code_ref: YR_ARENA_REF,
    pub next: *mut YR_AC_MATCH_LIST_ENTRY,
}
#[test]
fn bindgen_test_layout_YR_AC_MATCH_LIST_ENTRY() {
    const UNINIT: ::std::mem::MaybeUninit<YR_AC_MATCH_LIST_ENTRY> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<YR_AC_MATCH_LIST_ENTRY>(),
        40usize,
        concat!("Size of: ", stringify!(YR_AC_MATCH_LIST_ENTRY))
    );
    assert_eq!(
        ::std::mem::align_of::<YR_AC_MATCH_LIST_ENTRY>(),
        8usize,
        concat!("Alignment of ", stringify!(YR_AC_MATCH_LIST_ENTRY))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).backtrack) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(YR_AC_MATCH_LIST_ENTRY),
            "::",
            stringify!(backtrack)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).string_idx) as usize - ptr as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(YR_AC_MATCH_LIST_ENTRY),
            "::",
            stringify!(string_idx)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).ref_) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(YR_AC_MATCH_LIST_ENTRY),
            "::",
            stringify!(ref_)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).forward_code_ref) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(YR_AC_MATCH_LIST_ENTRY),
            "::",
            stringify!(forward_code_ref)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).backward_code_ref) as usize - ptr as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(YR_AC_MATCH_LIST_ENTRY),
            "::",
            stringify!(backward_code_ref)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).next) as usize - ptr as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(YR_AC_MATCH_LIST_ENTRY),
            "::",
            stringify!(next)
        )
    );
}
impl Default for YR_AC_MATCH_LIST_ENTRY {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct YR_AC_AUTOMATON {
    pub arena: *mut YR_ARENA,
    pub tables_size: u32,
    pub t_table_unused_candidate: u32,
    pub bitmask: *mut ::std::os::raw::c_ulong,
    pub root: *mut YR_AC_STATE,
}
#[test]
fn bindgen_test_layout_YR_AC_AUTOMATON() {
    const UNINIT: ::std::mem::MaybeUninit<YR_AC_AUTOMATON> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<YR_AC_AUTOMATON>(),
        32usize,
        concat!("Size of: ", stringify!(YR_AC_AUTOMATON))
    );
    assert_eq!(
        ::std::mem::align_of::<YR_AC_AUTOMATON>(),
        8usize,
        concat!("Alignment of ", stringify!(YR_AC_AUTOMATON))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).arena) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(YR_AC_AUTOMATON),
            "::",
            stringify!(arena)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).tables_size) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(YR_AC_AUTOMATON),
            "::",
            stringify!(tables_size)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).t_table_unused_candidate) as usize - ptr as usize },
        12usize,
        concat!(
            "Offset of field: ",
            stringify!(YR_AC_AUTOMATON),
            "::",
            stringify!(t_table_unused_candidate)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).bitmask) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(YR_AC_AUTOMATON),
            "::",
            stringify!(bitmask)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).root) as usize - ptr as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(YR_AC_AUTOMATON),
            "::",
            stringify!(root)
        )
    );
}
impl Default for YR_AC_AUTOMATON {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct YR_RULES {
    pub arena: *mut YR_ARENA,
    pub __bindgen_anon_1: YR_RULES__bindgen_ty_1,
    pub __bindgen_anon_2: YR_RULES__bindgen_ty_2,
    pub __bindgen_anon_3: YR_RULES__bindgen_ty_3,
    pub ac_transition_table: *mut YR_AC_TRANSITION,
    pub ac_match_pool: *mut YR_AC_MATCH,
    pub ac_match_table: *mut u32,
    pub code_start: *const u8,
    pub num_rules: u32,
    pub num_strings: u32,
    pub num_namespaces: u32,
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union YR_RULES__bindgen_ty_1 {
    pub rules_table: *mut YR_RULE,
    pub rules_list_head: *mut YR_RULE,
}
#[test]
fn bindgen_test_layout_YR_RULES__bindgen_ty_1() {
    const UNINIT: ::std::mem::MaybeUninit<YR_RULES__bindgen_ty_1> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<YR_RULES__bindgen_ty_1>(),
        8usize,
        concat!("Size of: ", stringify!(YR_RULES__bindgen_ty_1))
    );
    assert_eq!(
        ::std::mem::align_of::<YR_RULES__bindgen_ty_1>(),
        8usize,
        concat!("Alignment of ", stringify!(YR_RULES__bindgen_ty_1))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).rules_table) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(YR_RULES__bindgen_ty_1),
            "::",
            stringify!(rules_table)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).rules_list_head) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(YR_RULES__bindgen_ty_1),
            "::",
            stringify!(rules_list_head)
        )
    );
}
impl Default for YR_RULES__bindgen_ty_1 {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union YR_RULES__bindgen_ty_2 {
    pub strings_table: *mut YR_STRING,
    pub strings_list_head: *mut YR_STRING,
}
#[test]
fn bindgen_test_layout_YR_RULES__bindgen_ty_2() {
    const UNINIT: ::std::mem::MaybeUninit<YR_RULES__bindgen_ty_2> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<YR_RULES__bindgen_ty_2>(),
        8usize,
        concat!("Size of: ", stringify!(YR_RULES__bindgen_ty_2))
    );
    assert_eq!(
        ::std::mem::align_of::<YR_RULES__bindgen_ty_2>(),
        8usize,
        concat!("Alignment of ", stringify!(YR_RULES__bindgen_ty_2))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).strings_table) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(YR_RULES__bindgen_ty_2),
            "::",
            stringify!(strings_table)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).strings_list_head) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(YR_RULES__bindgen_ty_2),
            "::",
            stringify!(strings_list_head)
        )
    );
}
impl Default for YR_RULES__bindgen_ty_2 {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union YR_RULES__bindgen_ty_3 {
    pub ext_vars_table: *mut YR_EXTERNAL_VARIABLE,
    pub externals_list_head: *mut YR_EXTERNAL_VARIABLE,
}
#[test]
fn bindgen_test_layout_YR_RULES__bindgen_ty_3() {
    const UNINIT: ::std::mem::MaybeUninit<YR_RULES__bindgen_ty_3> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<YR_RULES__bindgen_ty_3>(),
        8usize,
        concat!("Size of: ", stringify!(YR_RULES__bindgen_ty_3))
    );
    assert_eq!(
        ::std::mem::align_of::<YR_RULES__bindgen_ty_3>(),
        8usize,
        concat!("Alignment of ", stringify!(YR_RULES__bindgen_ty_3))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).ext_vars_table) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(YR_RULES__bindgen_ty_3),
            "::",
            stringify!(ext_vars_table)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).externals_list_head) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(YR_RULES__bindgen_ty_3),
            "::",
            stringify!(externals_list_head)
        )
    );
}
impl Default for YR_RULES__bindgen_ty_3 {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[test]
fn bindgen_test_layout_YR_RULES() {
    const UNINIT: ::std::mem::MaybeUninit<YR_RULES> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<YR_RULES>(),
        80usize,
        concat!("Size of: ", stringify!(YR_RULES))
    );
    assert_eq!(
        ::std::mem::align_of::<YR_RULES>(),
        8usize,
        concat!("Alignment of ", stringify!(YR_RULES))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).arena) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(YR_RULES),
            "::",
            stringify!(arena)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).ac_transition_table) as usize - ptr as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(YR_RULES),
            "::",
            stringify!(ac_transition_table)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).ac_match_pool) as usize - ptr as usize },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(YR_RULES),
            "::",
            stringify!(ac_match_pool)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).ac_match_table) as usize - ptr as usize },
        48usize,
        concat!(
            "Offset of field: ",
            stringify!(YR_RULES),
            "::",
            stringify!(ac_match_table)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).code_start) as usize - ptr as usize },
        56usize,
        concat!(
            "Offset of field: ",
            stringify!(YR_RULES),
            "::",
            stringify!(code_start)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).num_rules) as usize - ptr as usize },
        64usize,
        concat!(
            "Offset of field: ",
            stringify!(YR_RULES),
            "::",
            stringify!(num_rules)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).num_strings) as usize - ptr as usize },
        68usize,
        concat!(
            "Offset of field: ",
            stringify!(YR_RULES),
            "::",
            stringify!(num_strings)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).num_namespaces) as usize - ptr as usize },
        72usize,
        concat!(
            "Offset of field: ",
            stringify!(YR_RULES),
            "::",
            stringify!(num_namespaces)
        )
    );
}
impl Default for YR_RULES {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct YR_RULES_STATS {
    pub num_rules: u32,
    pub num_strings: u32,
    pub ac_matches: u32,
    pub ac_root_match_list_length: u32,
    pub ac_average_match_list_length: f32,
    pub top_ac_match_list_lengths: [u32; 100usize],
    pub ac_match_list_length_pctls: [u32; 101usize],
    pub ac_tables_size: u32,
}
#[test]
fn bindgen_test_layout_YR_RULES_STATS() {
    const UNINIT: ::std::mem::MaybeUninit<YR_RULES_STATS> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<YR_RULES_STATS>(),
        828usize,
        concat!("Size of: ", stringify!(YR_RULES_STATS))
    );
    assert_eq!(
        ::std::mem::align_of::<YR_RULES_STATS>(),
        4usize,
        concat!("Alignment of ", stringify!(YR_RULES_STATS))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).num_rules) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(YR_RULES_STATS),
            "::",
            stringify!(num_rules)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).num_strings) as usize - ptr as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(YR_RULES_STATS),
            "::",
            stringify!(num_strings)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).ac_matches) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(YR_RULES_STATS),
            "::",
            stringify!(ac_matches)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).ac_root_match_list_length) as usize - ptr as usize },
        12usize,
        concat!(
            "Offset of field: ",
            stringify!(YR_RULES_STATS),
            "::",
            stringify!(ac_root_match_list_length)
        )
    );
    assert_eq!(
        unsafe {
            ::std::ptr::addr_of!((*ptr).ac_average_match_list_length) as usize - ptr as usize
        },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(YR_RULES_STATS),
            "::",
            stringify!(ac_average_match_list_length)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).top_ac_match_list_lengths) as usize - ptr as usize },
        20usize,
        concat!(
            "Offset of field: ",
            stringify!(YR_RULES_STATS),
            "::",
            stringify!(top_ac_match_list_lengths)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).ac_match_list_length_pctls) as usize - ptr as usize },
        420usize,
        concat!(
            "Offset of field: ",
            stringify!(YR_RULES_STATS),
            "::",
            stringify!(ac_match_list_length_pctls)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).ac_tables_size) as usize - ptr as usize },
        824usize,
        concat!(
            "Offset of field: ",
            stringify!(YR_RULES_STATS),
            "::",
            stringify!(ac_tables_size)
        )
    );
}
impl Default for YR_RULES_STATS {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C)]
#[derive(Debug, Default, Copy, Clone)]
pub struct YR_PROFILING_INFO {
    pub atom_matches: u32,
    pub match_time: u64,
    pub exec_time: u64,
}
#[test]
fn bindgen_test_layout_YR_PROFILING_INFO() {
    const UNINIT: ::std::mem::MaybeUninit<YR_PROFILING_INFO> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<YR_PROFILING_INFO>(),
        24usize,
        concat!("Size of: ", stringify!(YR_PROFILING_INFO))
    );
    assert_eq!(
        ::std::mem::align_of::<YR_PROFILING_INFO>(),
        8usize,
        concat!("Alignment of ", stringify!(YR_PROFILING_INFO))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).atom_matches) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(YR_PROFILING_INFO),
            "::",
            stringify!(atom_matches)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).match_time) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(YR_PROFILING_INFO),
            "::",
            stringify!(match_time)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).exec_time) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(YR_PROFILING_INFO),
            "::",
            stringify!(exec_time)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct YR_RULE_PROFILING_INFO {
    pub rule: *mut YR_RULE,
    pub cost: u64,
}
#[test]
fn bindgen_test_layout_YR_RULE_PROFILING_INFO() {
    const UNINIT: ::std::mem::MaybeUninit<YR_RULE_PROFILING_INFO> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<YR_RULE_PROFILING_INFO>(),
        16usize,
        concat!("Size of: ", stringify!(YR_RULE_PROFILING_INFO))
    );
    assert_eq!(
        ::std::mem::align_of::<YR_RULE_PROFILING_INFO>(),
        8usize,
        concat!("Alignment of ", stringify!(YR_RULE_PROFILING_INFO))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).rule) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(YR_RULE_PROFILING_INFO),
            "::",
            stringify!(rule)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).cost) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(YR_RULE_PROFILING_INFO),
            "::",
            stringify!(cost)
        )
    );
}
impl Default for YR_RULE_PROFILING_INFO {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
pub type YR_MEMORY_BLOCK_FETCH_DATA_FUNC =
    ::std::option::Option<unsafe extern "C" fn(self_: *mut YR_MEMORY_BLOCK) -> *const u8>;
pub type YR_MEMORY_BLOCK_ITERATOR_FUNC = ::std::option::Option<
    unsafe extern "C" fn(self_: *mut YR_MEMORY_BLOCK_ITERATOR) -> *mut YR_MEMORY_BLOCK,
>;
pub type YR_MEMORY_BLOCK_ITERATOR_SIZE_FUNC =
    ::std::option::Option<unsafe extern "C" fn(self_: *mut YR_MEMORY_BLOCK_ITERATOR) -> u64>;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct YR_MEMORY_BLOCK {
    pub size: usize,
    pub base: u64,
    pub context: *mut ::std::os::raw::c_void,
    pub fetch_data: YR_MEMORY_BLOCK_FETCH_DATA_FUNC,
}
#[test]
fn bindgen_test_layout_YR_MEMORY_BLOCK() {
    const UNINIT: ::std::mem::MaybeUninit<YR_MEMORY_BLOCK> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<YR_MEMORY_BLOCK>(),
        32usize,
        concat!("Size of: ", stringify!(YR_MEMORY_BLOCK))
    );
    assert_eq!(
        ::std::mem::align_of::<YR_MEMORY_BLOCK>(),
        8usize,
        concat!("Alignment of ", stringify!(YR_MEMORY_BLOCK))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).size) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(YR_MEMORY_BLOCK),
            "::",
            stringify!(size)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).base) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(YR_MEMORY_BLOCK),
            "::",
            stringify!(base)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).context) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(YR_MEMORY_BLOCK),
            "::",
            stringify!(context)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).fetch_data) as usize - ptr as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(YR_MEMORY_BLOCK),
            "::",
            stringify!(fetch_data)
        )
    );
}
impl Default for YR_MEMORY_BLOCK {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct YR_MEMORY_BLOCK_ITERATOR {
    pub context: *mut ::std::os::raw::c_void,
    pub first: YR_MEMORY_BLOCK_ITERATOR_FUNC,
    pub next: YR_MEMORY_BLOCK_ITERATOR_FUNC,
    pub file_size: YR_MEMORY_BLOCK_ITERATOR_SIZE_FUNC,
    pub last_error: ::std::os::raw::c_int,
}
#[test]
fn bindgen_test_layout_YR_MEMORY_BLOCK_ITERATOR() {
    const UNINIT: ::std::mem::MaybeUninit<YR_MEMORY_BLOCK_ITERATOR> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<YR_MEMORY_BLOCK_ITERATOR>(),
        40usize,
        concat!("Size of: ", stringify!(YR_MEMORY_BLOCK_ITERATOR))
    );
    assert_eq!(
        ::std::mem::align_of::<YR_MEMORY_BLOCK_ITERATOR>(),
        8usize,
        concat!("Alignment of ", stringify!(YR_MEMORY_BLOCK_ITERATOR))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).context) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(YR_MEMORY_BLOCK_ITERATOR),
            "::",
            stringify!(context)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).first) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(YR_MEMORY_BLOCK_ITERATOR),
            "::",
            stringify!(first)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).next) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(YR_MEMORY_BLOCK_ITERATOR),
            "::",
            stringify!(next)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).file_size) as usize - ptr as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(YR_MEMORY_BLOCK_ITERATOR),
            "::",
            stringify!(file_size)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).last_error) as usize - ptr as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(YR_MEMORY_BLOCK_ITERATOR),
            "::",
            stringify!(last_error)
        )
    );
}
impl Default for YR_MEMORY_BLOCK_ITERATOR {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
pub type YR_CALLBACK_FUNC = ::std::option::Option<
    unsafe extern "C" fn(
        context: *mut YR_SCAN_CONTEXT,
        message: ::std::os::raw::c_int,
        message_data: *mut ::std::os::raw::c_void,
        user_data: *mut ::std::os::raw::c_void,
    ) -> ::std::os::raw::c_int,
>;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct YR_SCAN_CONTEXT {
    pub file_size: u64,
    pub entry_point: u64,
    pub flags: ::std::os::raw::c_int,
    pub canary: ::std::os::raw::c_int,
    pub timeout: u64,
    pub user_data: *mut ::std::os::raw::c_void,
    pub callback: YR_CALLBACK_FUNC,
    pub rules: *mut YR_RULES,
    pub last_error_string: *mut YR_STRING,
    pub iterator: *mut YR_MEMORY_BLOCK_ITERATOR,
    pub objects_table: *mut YR_HASH_TABLE,
    pub matches_notebook: *mut YR_NOTEBOOK,
    pub stopwatch: YR_STOPWATCH,
    pub re_fiber_pool: RE_FIBER_POOL,
    pub re_fast_exec_position_pool: RE_FAST_EXEC_POSITION_POOL,
    pub rule_matches_flags: *mut ::std::os::raw::c_ulong,
    pub ns_unsatisfied_flags: *mut ::std::os::raw::c_ulong,
    pub strings_temp_disabled: *mut ::std::os::raw::c_ulong,
    pub matches: *mut YR_MATCHES,
    pub unconfirmed_matches: *mut YR_MATCHES,
    pub profiling_info: *mut YR_PROFILING_INFO,
}
#[test]
fn bindgen_test_layout_YR_SCAN_CONTEXT() {
    const UNINIT: ::std::mem::MaybeUninit<YR_SCAN_CONTEXT> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<YR_SCAN_CONTEXT>(),
        184usize,
        concat!("Size of: ", stringify!(YR_SCAN_CONTEXT))
    );
    assert_eq!(
        ::std::mem::align_of::<YR_SCAN_CONTEXT>(),
        8usize,
        concat!("Alignment of ", stringify!(YR_SCAN_CONTEXT))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).file_size) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(YR_SCAN_CONTEXT),
            "::",
            stringify!(file_size)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).entry_point) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(YR_SCAN_CONTEXT),
            "::",
            stringify!(entry_point)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).flags) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(YR_SCAN_CONTEXT),
            "::",
            stringify!(flags)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).canary) as usize - ptr as usize },
        20usize,
        concat!(
            "Offset of field: ",
            stringify!(YR_SCAN_CONTEXT),
            "::",
            stringify!(canary)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).timeout) as usize - ptr as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(YR_SCAN_CONTEXT),
            "::",
            stringify!(timeout)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).user_data) as usize - ptr as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(YR_SCAN_CONTEXT),
            "::",
            stringify!(user_data)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).callback) as usize - ptr as usize },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(YR_SCAN_CONTEXT),
            "::",
            stringify!(callback)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).rules) as usize - ptr as usize },
        48usize,
        concat!(
            "Offset of field: ",
            stringify!(YR_SCAN_CONTEXT),
            "::",
            stringify!(rules)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).last_error_string) as usize - ptr as usize },
        56usize,
        concat!(
            "Offset of field: ",
            stringify!(YR_SCAN_CONTEXT),
            "::",
            stringify!(last_error_string)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).iterator) as usize - ptr as usize },
        64usize,
        concat!(
            "Offset of field: ",
            stringify!(YR_SCAN_CONTEXT),
            "::",
            stringify!(iterator)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).objects_table) as usize - ptr as usize },
        72usize,
        concat!(
            "Offset of field: ",
            stringify!(YR_SCAN_CONTEXT),
            "::",
            stringify!(objects_table)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).matches_notebook) as usize - ptr as usize },
        80usize,
        concat!(
            "Offset of field: ",
            stringify!(YR_SCAN_CONTEXT),
            "::",
            stringify!(matches_notebook)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).stopwatch) as usize - ptr as usize },
        88usize,
        concat!(
            "Offset of field: ",
            stringify!(YR_SCAN_CONTEXT),
            "::",
            stringify!(stopwatch)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).re_fiber_pool) as usize - ptr as usize },
        104usize,
        concat!(
            "Offset of field: ",
            stringify!(YR_SCAN_CONTEXT),
            "::",
            stringify!(re_fiber_pool)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).re_fast_exec_position_pool) as usize - ptr as usize },
        128usize,
        concat!(
            "Offset of field: ",
            stringify!(YR_SCAN_CONTEXT),
            "::",
            stringify!(re_fast_exec_position_pool)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).rule_matches_flags) as usize - ptr as usize },
        136usize,
        concat!(
            "Offset of field: ",
            stringify!(YR_SCAN_CONTEXT),
            "::",
            stringify!(rule_matches_flags)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).ns_unsatisfied_flags) as usize - ptr as usize },
        144usize,
        concat!(
            "Offset of field: ",
            stringify!(YR_SCAN_CONTEXT),
            "::",
            stringify!(ns_unsatisfied_flags)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).strings_temp_disabled) as usize - ptr as usize },
        152usize,
        concat!(
            "Offset of field: ",
            stringify!(YR_SCAN_CONTEXT),
            "::",
            stringify!(strings_temp_disabled)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).matches) as usize - ptr as usize },
        160usize,
        concat!(
            "Offset of field: ",
            stringify!(YR_SCAN_CONTEXT),
            "::",
            stringify!(matches)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).unconfirmed_matches) as usize - ptr as usize },
        168usize,
        concat!(
            "Offset of field: ",
            stringify!(YR_SCAN_CONTEXT),
            "::",
            stringify!(unconfirmed_matches)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).profiling_info) as usize - ptr as usize },
        176usize,
        concat!(
            "Offset of field: ",
            stringify!(YR_SCAN_CONTEXT),
            "::",
            stringify!(profiling_info)
        )
    );
}
impl Default for YR_SCAN_CONTEXT {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union YR_VALUE {
    pub i: i64,
    pub d: f64,
    pub p: *mut ::std::os::raw::c_void,
    pub o: *mut YR_OBJECT,
    pub s: *mut YR_STRING,
    pub it: *mut YR_ITERATOR,
    pub ss: *mut SIZED_STRING,
    pub re: *mut RE,
}
#[test]
fn bindgen_test_layout_YR_VALUE() {
    const UNINIT: ::std::mem::MaybeUninit<YR_VALUE> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<YR_VALUE>(),
        8usize,
        concat!("Size of: ", stringify!(YR_VALUE))
    );
    assert_eq!(
        ::std::mem::align_of::<YR_VALUE>(),
        8usize,
        concat!("Alignment of ", stringify!(YR_VALUE))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).i) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(YR_VALUE),
            "::",
            stringify!(i)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).d) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(YR_VALUE),
            "::",
            stringify!(d)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).p) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(YR_VALUE),
            "::",
            stringify!(p)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).o) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(YR_VALUE),
            "::",
            stringify!(o)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).s) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(YR_VALUE),
            "::",
            stringify!(s)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).it) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(YR_VALUE),
            "::",
            stringify!(it)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).ss) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(YR_VALUE),
            "::",
            stringify!(ss)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).re) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(YR_VALUE),
            "::",
            stringify!(re)
        )
    );
}
impl Default for YR_VALUE {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct YR_VALUE_STACK {
    pub sp: u32,
    pub capacity: u32,
    pub items: *mut YR_VALUE,
}
#[test]
fn bindgen_test_layout_YR_VALUE_STACK() {
    const UNINIT: ::std::mem::MaybeUninit<YR_VALUE_STACK> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<YR_VALUE_STACK>(),
        16usize,
        concat!("Size of: ", stringify!(YR_VALUE_STACK))
    );
    assert_eq!(
        ::std::mem::align_of::<YR_VALUE_STACK>(),
        8usize,
        concat!("Alignment of ", stringify!(YR_VALUE_STACK))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).sp) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(YR_VALUE_STACK),
            "::",
            stringify!(sp)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).capacity) as usize - ptr as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(YR_VALUE_STACK),
            "::",
            stringify!(capacity)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).items) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(YR_VALUE_STACK),
            "::",
            stringify!(items)
        )
    );
}
impl Default for YR_VALUE_STACK {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct YR_OBJECT {
    pub canary: ::std::os::raw::c_int,
    pub type_: i8,
    pub identifier: *const ::std::os::raw::c_char,
    pub parent: *mut YR_OBJECT,
    pub data: *mut ::std::os::raw::c_void,
    pub value: YR_VALUE,
}
#[test]
fn bindgen_test_layout_YR_OBJECT() {
    const UNINIT: ::std::mem::MaybeUninit<YR_OBJECT> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<YR_OBJECT>(),
        40usize,
        concat!("Size of: ", stringify!(YR_OBJECT))
    );
    assert_eq!(
        ::std::mem::align_of::<YR_OBJECT>(),
        8usize,
        concat!("Alignment of ", stringify!(YR_OBJECT))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).canary) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(YR_OBJECT),
            "::",
            stringify!(canary)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).type_) as usize - ptr as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(YR_OBJECT),
            "::",
            stringify!(type_)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).identifier) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(YR_OBJECT),
            "::",
            stringify!(identifier)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).parent) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(YR_OBJECT),
            "::",
            stringify!(parent)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).data) as usize - ptr as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(YR_OBJECT),
            "::",
            stringify!(data)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).value) as usize - ptr as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(YR_OBJECT),
            "::",
            stringify!(value)
        )
    );
}
impl Default for YR_OBJECT {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct YR_OBJECT_STRUCTURE {
    pub canary: ::std::os::raw::c_int,
    pub type_: i8,
    pub identifier: *const ::std::os::raw::c_char,
    pub parent: *mut YR_OBJECT,
    pub data: *mut ::std::os::raw::c_void,
    pub members: *mut YR_STRUCTURE_MEMBER,
}
#[test]
fn bindgen_test_layout_YR_OBJECT_STRUCTURE() {
    const UNINIT: ::std::mem::MaybeUninit<YR_OBJECT_STRUCTURE> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<YR_OBJECT_STRUCTURE>(),
        40usize,
        concat!("Size of: ", stringify!(YR_OBJECT_STRUCTURE))
    );
    assert_eq!(
        ::std::mem::align_of::<YR_OBJECT_STRUCTURE>(),
        8usize,
        concat!("Alignment of ", stringify!(YR_OBJECT_STRUCTURE))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).canary) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(YR_OBJECT_STRUCTURE),
            "::",
            stringify!(canary)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).type_) as usize - ptr as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(YR_OBJECT_STRUCTURE),
            "::",
            stringify!(type_)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).identifier) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(YR_OBJECT_STRUCTURE),
            "::",
            stringify!(identifier)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).parent) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(YR_OBJECT_STRUCTURE),
            "::",
            stringify!(parent)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).data) as usize - ptr as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(YR_OBJECT_STRUCTURE),
            "::",
            stringify!(data)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).members) as usize - ptr as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(YR_OBJECT_STRUCTURE),
            "::",
            stringify!(members)
        )
    );
}
impl Default for YR_OBJECT_STRUCTURE {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct YR_OBJECT_ARRAY {
    pub canary: ::std::os::raw::c_int,
    pub type_: i8,
    pub identifier: *const ::std::os::raw::c_char,
    pub parent: *mut YR_OBJECT,
    pub data: *mut ::std::os::raw::c_void,
    pub prototype_item: *mut YR_OBJECT,
    pub items: *mut YR_ARRAY_ITEMS,
}
#[test]
fn bindgen_test_layout_YR_OBJECT_ARRAY() {
    const UNINIT: ::std::mem::MaybeUninit<YR_OBJECT_ARRAY> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<YR_OBJECT_ARRAY>(),
        48usize,
        concat!("Size of: ", stringify!(YR_OBJECT_ARRAY))
    );
    assert_eq!(
        ::std::mem::align_of::<YR_OBJECT_ARRAY>(),
        8usize,
        concat!("Alignment of ", stringify!(YR_OBJECT_ARRAY))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).canary) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(YR_OBJECT_ARRAY),
            "::",
            stringify!(canary)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).type_) as usize - ptr as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(YR_OBJECT_ARRAY),
            "::",
            stringify!(type_)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).identifier) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(YR_OBJECT_ARRAY),
            "::",
            stringify!(identifier)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).parent) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(YR_OBJECT_ARRAY),
            "::",
            stringify!(parent)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).data) as usize - ptr as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(YR_OBJECT_ARRAY),
            "::",
            stringify!(data)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).prototype_item) as usize - ptr as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(YR_OBJECT_ARRAY),
            "::",
            stringify!(prototype_item)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).items) as usize - ptr as usize },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(YR_OBJECT_ARRAY),
            "::",
            stringify!(items)
        )
    );
}
impl Default for YR_OBJECT_ARRAY {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct YR_OBJECT_DICTIONARY {
    pub canary: ::std::os::raw::c_int,
    pub type_: i8,
    pub identifier: *const ::std::os::raw::c_char,
    pub parent: *mut YR_OBJECT,
    pub data: *mut ::std::os::raw::c_void,
    pub prototype_item: *mut YR_OBJECT,
    pub items: *mut YR_DICTIONARY_ITEMS,
}
#[test]
fn bindgen_test_layout_YR_OBJECT_DICTIONARY() {
    const UNINIT: ::std::mem::MaybeUninit<YR_OBJECT_DICTIONARY> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<YR_OBJECT_DICTIONARY>(),
        48usize,
        concat!("Size of: ", stringify!(YR_OBJECT_DICTIONARY))
    );
    assert_eq!(
        ::std::mem::align_of::<YR_OBJECT_DICTIONARY>(),
        8usize,
        concat!("Alignment of ", stringify!(YR_OBJECT_DICTIONARY))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).canary) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(YR_OBJECT_DICTIONARY),
            "::",
            stringify!(canary)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).type_) as usize - ptr as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(YR_OBJECT_DICTIONARY),
            "::",
            stringify!(type_)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).identifier) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(YR_OBJECT_DICTIONARY),
            "::",
            stringify!(identifier)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).parent) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(YR_OBJECT_DICTIONARY),
            "::",
            stringify!(parent)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).data) as usize - ptr as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(YR_OBJECT_DICTIONARY),
            "::",
            stringify!(data)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).prototype_item) as usize - ptr as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(YR_OBJECT_DICTIONARY),
            "::",
            stringify!(prototype_item)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).items) as usize - ptr as usize },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(YR_OBJECT_DICTIONARY),
            "::",
            stringify!(items)
        )
    );
}
impl Default for YR_OBJECT_DICTIONARY {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
pub type YR_MODULE_FUNC = ::std::option::Option<
    unsafe extern "C" fn(
        args: *mut YR_VALUE,
        context: *mut YR_SCAN_CONTEXT,
        function_obj: *mut YR_OBJECT_FUNCTION,
    ) -> ::std::os::raw::c_int,
>;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct YR_OBJECT_FUNCTION {
    pub canary: ::std::os::raw::c_int,
    pub type_: i8,
    pub identifier: *const ::std::os::raw::c_char,
    pub parent: *mut YR_OBJECT,
    pub data: *mut ::std::os::raw::c_void,
    pub return_obj: *mut YR_OBJECT,
    pub prototypes: [YR_OBJECT_FUNCTION__bindgen_ty_1; 10usize],
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct YR_OBJECT_FUNCTION__bindgen_ty_1 {
    pub arguments_fmt: *const ::std::os::raw::c_char,
    pub code: YR_MODULE_FUNC,
}
#[test]
fn bindgen_test_layout_YR_OBJECT_FUNCTION__bindgen_ty_1() {
    const UNINIT: ::std::mem::MaybeUninit<YR_OBJECT_FUNCTION__bindgen_ty_1> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<YR_OBJECT_FUNCTION__bindgen_ty_1>(),
        16usize,
        concat!("Size of: ", stringify!(YR_OBJECT_FUNCTION__bindgen_ty_1))
    );
    assert_eq!(
        ::std::mem::align_of::<YR_OBJECT_FUNCTION__bindgen_ty_1>(),
        8usize,
        concat!(
            "Alignment of ",
            stringify!(YR_OBJECT_FUNCTION__bindgen_ty_1)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).arguments_fmt) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(YR_OBJECT_FUNCTION__bindgen_ty_1),
            "::",
            stringify!(arguments_fmt)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).code) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(YR_OBJECT_FUNCTION__bindgen_ty_1),
            "::",
            stringify!(code)
        )
    );
}
impl Default for YR_OBJECT_FUNCTION__bindgen_ty_1 {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[test]
fn bindgen_test_layout_YR_OBJECT_FUNCTION() {
    const UNINIT: ::std::mem::MaybeUninit<YR_OBJECT_FUNCTION> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<YR_OBJECT_FUNCTION>(),
        200usize,
        concat!("Size of: ", stringify!(YR_OBJECT_FUNCTION))
    );
    assert_eq!(
        ::std::mem::align_of::<YR_OBJECT_FUNCTION>(),
        8usize,
        concat!("Alignment of ", stringify!(YR_OBJECT_FUNCTION))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).canary) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(YR_OBJECT_FUNCTION),
            "::",
            stringify!(canary)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).type_) as usize - ptr as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(YR_OBJECT_FUNCTION),
            "::",
            stringify!(type_)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).identifier) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(YR_OBJECT_FUNCTION),
            "::",
            stringify!(identifier)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).parent) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(YR_OBJECT_FUNCTION),
            "::",
            stringify!(parent)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).data) as usize - ptr as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(YR_OBJECT_FUNCTION),
            "::",
            stringify!(data)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).return_obj) as usize - ptr as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(YR_OBJECT_FUNCTION),
            "::",
            stringify!(return_obj)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).prototypes) as usize - ptr as usize },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(YR_OBJECT_FUNCTION),
            "::",
            stringify!(prototypes)
        )
    );
}
impl Default for YR_OBJECT_FUNCTION {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct YR_STRUCTURE_MEMBER {
    pub object: *mut YR_OBJECT,
    pub next: *mut YR_STRUCTURE_MEMBER,
}
#[test]
fn bindgen_test_layout_YR_STRUCTURE_MEMBER() {
    const UNINIT: ::std::mem::MaybeUninit<YR_STRUCTURE_MEMBER> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<YR_STRUCTURE_MEMBER>(),
        16usize,
        concat!("Size of: ", stringify!(YR_STRUCTURE_MEMBER))
    );
    assert_eq!(
        ::std::mem::align_of::<YR_STRUCTURE_MEMBER>(),
        8usize,
        concat!("Alignment of ", stringify!(YR_STRUCTURE_MEMBER))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).object) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(YR_STRUCTURE_MEMBER),
            "::",
            stringify!(object)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).next) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(YR_STRUCTURE_MEMBER),
            "::",
            stringify!(next)
        )
    );
}
impl Default for YR_STRUCTURE_MEMBER {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct YR_ARRAY_ITEMS {
    pub capacity: ::std::os::raw::c_int,
    pub length: ::std::os::raw::c_int,
    pub objects: [*mut YR_OBJECT; 1usize],
}
#[test]
fn bindgen_test_layout_YR_ARRAY_ITEMS() {
    const UNINIT: ::std::mem::MaybeUninit<YR_ARRAY_ITEMS> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<YR_ARRAY_ITEMS>(),
        16usize,
        concat!("Size of: ", stringify!(YR_ARRAY_ITEMS))
    );
    assert_eq!(
        ::std::mem::align_of::<YR_ARRAY_ITEMS>(),
        8usize,
        concat!("Alignment of ", stringify!(YR_ARRAY_ITEMS))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).capacity) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(YR_ARRAY_ITEMS),
            "::",
            stringify!(capacity)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).length) as usize - ptr as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(YR_ARRAY_ITEMS),
            "::",
            stringify!(length)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).objects) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(YR_ARRAY_ITEMS),
            "::",
            stringify!(objects)
        )
    );
}
impl Default for YR_ARRAY_ITEMS {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct YR_DICTIONARY_ITEMS {
    pub used: ::std::os::raw::c_int,
    pub free: ::std::os::raw::c_int,
    pub objects: [YR_DICTIONARY_ITEMS__bindgen_ty_1; 1usize],
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct YR_DICTIONARY_ITEMS__bindgen_ty_1 {
    pub key: *mut SIZED_STRING,
    pub obj: *mut YR_OBJECT,
}
#[test]
fn bindgen_test_layout_YR_DICTIONARY_ITEMS__bindgen_ty_1() {
    const UNINIT: ::std::mem::MaybeUninit<YR_DICTIONARY_ITEMS__bindgen_ty_1> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<YR_DICTIONARY_ITEMS__bindgen_ty_1>(),
        16usize,
        concat!("Size of: ", stringify!(YR_DICTIONARY_ITEMS__bindgen_ty_1))
    );
    assert_eq!(
        ::std::mem::align_of::<YR_DICTIONARY_ITEMS__bindgen_ty_1>(),
        8usize,
        concat!(
            "Alignment of ",
            stringify!(YR_DICTIONARY_ITEMS__bindgen_ty_1)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).key) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(YR_DICTIONARY_ITEMS__bindgen_ty_1),
            "::",
            stringify!(key)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).obj) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(YR_DICTIONARY_ITEMS__bindgen_ty_1),
            "::",
            stringify!(obj)
        )
    );
}
impl Default for YR_DICTIONARY_ITEMS__bindgen_ty_1 {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[test]
fn bindgen_test_layout_YR_DICTIONARY_ITEMS() {
    const UNINIT: ::std::mem::MaybeUninit<YR_DICTIONARY_ITEMS> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<YR_DICTIONARY_ITEMS>(),
        24usize,
        concat!("Size of: ", stringify!(YR_DICTIONARY_ITEMS))
    );
    assert_eq!(
        ::std::mem::align_of::<YR_DICTIONARY_ITEMS>(),
        8usize,
        concat!("Alignment of ", stringify!(YR_DICTIONARY_ITEMS))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).used) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(YR_DICTIONARY_ITEMS),
            "::",
            stringify!(used)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).free) as usize - ptr as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(YR_DICTIONARY_ITEMS),
            "::",
            stringify!(free)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).objects) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(YR_DICTIONARY_ITEMS),
            "::",
            stringify!(objects)
        )
    );
}
impl Default for YR_DICTIONARY_ITEMS {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
pub type YR_ITERATOR_NEXT_FUNC = ::std::option::Option<
    unsafe extern "C" fn(
        self_: *mut YR_ITERATOR,
        stack: *mut YR_VALUE_STACK,
    ) -> ::std::os::raw::c_int,
>;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct YR_ARRAY_ITERATOR {
    pub array: *mut YR_OBJECT,
    pub index: ::std::os::raw::c_int,
}
#[test]
fn bindgen_test_layout_YR_ARRAY_ITERATOR() {
    const UNINIT: ::std::mem::MaybeUninit<YR_ARRAY_ITERATOR> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<YR_ARRAY_ITERATOR>(),
        16usize,
        concat!("Size of: ", stringify!(YR_ARRAY_ITERATOR))
    );
    assert_eq!(
        ::std::mem::align_of::<YR_ARRAY_ITERATOR>(),
        8usize,
        concat!("Alignment of ", stringify!(YR_ARRAY_ITERATOR))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).array) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(YR_ARRAY_ITERATOR),
            "::",
            stringify!(array)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).index) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(YR_ARRAY_ITERATOR),
            "::",
            stringify!(index)
        )
    );
}
impl Default for YR_ARRAY_ITERATOR {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct YR_DICT_ITERATOR {
    pub dict: *mut YR_OBJECT,
    pub index: ::std::os::raw::c_int,
}
#[test]
fn bindgen_test_layout_YR_DICT_ITERATOR() {
    const UNINIT: ::std::mem::MaybeUninit<YR_DICT_ITERATOR> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<YR_DICT_ITERATOR>(),
        16usize,
        concat!("Size of: ", stringify!(YR_DICT_ITERATOR))
    );
    assert_eq!(
        ::std::mem::align_of::<YR_DICT_ITERATOR>(),
        8usize,
        concat!("Alignment of ", stringify!(YR_DICT_ITERATOR))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).dict) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(YR_DICT_ITERATOR),
            "::",
            stringify!(dict)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).index) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(YR_DICT_ITERATOR),
            "::",
            stringify!(index)
        )
    );
}
impl Default for YR_DICT_ITERATOR {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C)]
#[derive(Debug, Default, Copy, Clone)]
pub struct YR_INT_RANGE_ITERATOR {
    pub next: i64,
    pub last: i64,
}
#[test]
fn bindgen_test_layout_YR_INT_RANGE_ITERATOR() {
    const UNINIT: ::std::mem::MaybeUninit<YR_INT_RANGE_ITERATOR> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<YR_INT_RANGE_ITERATOR>(),
        16usize,
        concat!("Size of: ", stringify!(YR_INT_RANGE_ITERATOR))
    );
    assert_eq!(
        ::std::mem::align_of::<YR_INT_RANGE_ITERATOR>(),
        8usize,
        concat!("Alignment of ", stringify!(YR_INT_RANGE_ITERATOR))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).next) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(YR_INT_RANGE_ITERATOR),
            "::",
            stringify!(next)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).last) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(YR_INT_RANGE_ITERATOR),
            "::",
            stringify!(last)
        )
    );
}
#[repr(C)]
#[derive(Debug, Default, Copy, Clone)]
pub struct YR_INT_ENUM_ITERATOR {
    pub next: i64,
    pub count: i64,
    pub items: [i64; 1usize],
}
#[test]
fn bindgen_test_layout_YR_INT_ENUM_ITERATOR() {
    const UNINIT: ::std::mem::MaybeUninit<YR_INT_ENUM_ITERATOR> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<YR_INT_ENUM_ITERATOR>(),
        24usize,
        concat!("Size of: ", stringify!(YR_INT_ENUM_ITERATOR))
    );
    assert_eq!(
        ::std::mem::align_of::<YR_INT_ENUM_ITERATOR>(),
        8usize,
        concat!("Alignment of ", stringify!(YR_INT_ENUM_ITERATOR))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).next) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(YR_INT_ENUM_ITERATOR),
            "::",
            stringify!(next)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).count) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(YR_INT_ENUM_ITERATOR),
            "::",
            stringify!(count)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).items) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(YR_INT_ENUM_ITERATOR),
            "::",
            stringify!(items)
        )
    );
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct YR_ITERATOR {
    pub next_func_idx: ::std::os::raw::c_int,
    pub __bindgen_anon_1: YR_ITERATOR__bindgen_ty_1,
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union YR_ITERATOR__bindgen_ty_1 {
    pub array_it: YR_ARRAY_ITERATOR,
    pub dict_it: YR_DICT_ITERATOR,
    pub int_range_it: YR_INT_RANGE_ITERATOR,
    pub int_enum_it: YR_INT_ENUM_ITERATOR,
}
#[test]
fn bindgen_test_layout_YR_ITERATOR__bindgen_ty_1() {
    const UNINIT: ::std::mem::MaybeUninit<YR_ITERATOR__bindgen_ty_1> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<YR_ITERATOR__bindgen_ty_1>(),
        24usize,
        concat!("Size of: ", stringify!(YR_ITERATOR__bindgen_ty_1))
    );
    assert_eq!(
        ::std::mem::align_of::<YR_ITERATOR__bindgen_ty_1>(),
        8usize,
        concat!("Alignment of ", stringify!(YR_ITERATOR__bindgen_ty_1))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).array_it) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(YR_ITERATOR__bindgen_ty_1),
            "::",
            stringify!(array_it)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).dict_it) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(YR_ITERATOR__bindgen_ty_1),
            "::",
            stringify!(dict_it)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).int_range_it) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(YR_ITERATOR__bindgen_ty_1),
            "::",
            stringify!(int_range_it)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).int_enum_it) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(YR_ITERATOR__bindgen_ty_1),
            "::",
            stringify!(int_enum_it)
        )
    );
}
impl Default for YR_ITERATOR__bindgen_ty_1 {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[test]
fn bindgen_test_layout_YR_ITERATOR() {
    const UNINIT: ::std::mem::MaybeUninit<YR_ITERATOR> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<YR_ITERATOR>(),
        32usize,
        concat!("Size of: ", stringify!(YR_ITERATOR))
    );
    assert_eq!(
        ::std::mem::align_of::<YR_ITERATOR>(),
        8usize,
        concat!("Alignment of ", stringify!(YR_ITERATOR))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).next_func_idx) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(YR_ITERATOR),
            "::",
            stringify!(next_func_idx)
        )
    );
}
impl Default for YR_ITERATOR {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
pub type RE_MATCH_CALLBACK_FUNC = ::std::option::Option<
    unsafe extern "C" fn(
        match_: *const u8,
        match_length: ::std::os::raw::c_int,
        flags: ::std::os::raw::c_int,
        args: *mut ::std::os::raw::c_void,
    ) -> ::std::os::raw::c_int,
>;
extern "C" {
    pub fn yr_re_ast_create(re_ast: *mut *mut RE_AST) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn yr_re_ast_destroy(re_ast: *mut RE_AST);
}
extern "C" {
    pub fn yr_re_ast_print(re_ast: *mut RE_AST);
}
extern "C" {
    pub fn yr_re_ast_extract_literal(re_ast: *mut RE_AST) -> *mut SIZED_STRING;
}
extern "C" {
    pub fn yr_re_ast_has_unbounded_quantifier_for_dot(re_ast: *mut RE_AST)
        -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn yr_re_ast_split_at_chaining_point(
        re_ast: *mut RE_AST,
        remainder_re_ast: *mut *mut RE_AST,
        min_gap: *mut i32,
        max_gap: *mut i32,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn yr_re_ast_emit_code(
        re_ast: *mut RE_AST,
        arena: *mut YR_ARENA,
        backwards_code: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn yr_re_node_create(type_: ::std::os::raw::c_int) -> *mut RE_NODE;
}
extern "C" {
    pub fn yr_re_node_destroy(node: *mut RE_NODE);
}
extern "C" {
    pub fn yr_re_node_append_child(node: *mut RE_NODE, child: *mut RE_NODE);
}
extern "C" {
    pub fn yr_re_node_prepend_child(node: *mut RE_NODE, child: *mut RE_NODE);
}
extern "C" {
    pub fn yr_re_exec(
        context: *mut YR_SCAN_CONTEXT,
        code: *const u8,
        input_data: *const u8,
        input_forwards_size: usize,
        input_backwards_size: usize,
        flags: ::std::os::raw::c_int,
        callback: RE_MATCH_CALLBACK_FUNC,
        callback_args: *mut ::std::os::raw::c_void,
        matches: *mut ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn yr_re_fast_exec(
        context: *mut YR_SCAN_CONTEXT,
        code: *const u8,
        input_data: *const u8,
        input_forwards_size: usize,
        input_backwards_size: usize,
        flags: ::std::os::raw::c_int,
        callback: RE_MATCH_CALLBACK_FUNC,
        callback_args: *mut ::std::os::raw::c_void,
        matches: *mut ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn yr_re_parse(
        re_string: *const ::std::os::raw::c_char,
        re_ast: *mut *mut RE_AST,
        error: *mut RE_ERROR,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn yr_re_parse_hex(
        hex_string: *const ::std::os::raw::c_char,
        re_ast: *mut *mut RE_AST,
        error: *mut RE_ERROR,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn yr_re_compile(
        re_string: *const ::std::os::raw::c_char,
        flags: ::std::os::raw::c_int,
        arena: *mut YR_ARENA,
        ref_: *mut YR_ARENA_REF,
        error: *mut RE_ERROR,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn yr_re_match(
        context: *mut YR_SCAN_CONTEXT,
        re: *mut RE,
        target: *const ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_int;
}
#[repr(C)]
#[derive(Debug, Default, Copy, Clone)]
pub struct YR_ATOM {
    pub length: u8,
    pub bytes: [u8; 4usize],
    pub mask: [u8; 4usize],
}
#[test]
fn bindgen_test_layout_YR_ATOM() {
    const UNINIT: ::std::mem::MaybeUninit<YR_ATOM> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<YR_ATOM>(),
        9usize,
        concat!("Size of: ", stringify!(YR_ATOM))
    );
    assert_eq!(
        ::std::mem::align_of::<YR_ATOM>(),
        1usize,
        concat!("Alignment of ", stringify!(YR_ATOM))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).length) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(YR_ATOM),
            "::",
            stringify!(length)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).bytes) as usize - ptr as usize },
        1usize,
        concat!(
            "Offset of field: ",
            stringify!(YR_ATOM),
            "::",
            stringify!(bytes)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).mask) as usize - ptr as usize },
        5usize,
        concat!(
            "Offset of field: ",
            stringify!(YR_ATOM),
            "::",
            stringify!(mask)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct YR_ATOM_TREE_NODE {
    pub type_: u8,
    pub atom: YR_ATOM,
    pub re_nodes: [*mut RE_NODE; 4usize],
    pub children_head: *mut YR_ATOM_TREE_NODE,
    pub children_tail: *mut YR_ATOM_TREE_NODE,
    pub next_sibling: *mut YR_ATOM_TREE_NODE,
}
#[test]
fn bindgen_test_layout_YR_ATOM_TREE_NODE() {
    const UNINIT: ::std::mem::MaybeUninit<YR_ATOM_TREE_NODE> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<YR_ATOM_TREE_NODE>(),
        72usize,
        concat!("Size of: ", stringify!(YR_ATOM_TREE_NODE))
    );
    assert_eq!(
        ::std::mem::align_of::<YR_ATOM_TREE_NODE>(),
        8usize,
        concat!("Alignment of ", stringify!(YR_ATOM_TREE_NODE))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).type_) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(YR_ATOM_TREE_NODE),
            "::",
            stringify!(type_)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).atom) as usize - ptr as usize },
        1usize,
        concat!(
            "Offset of field: ",
            stringify!(YR_ATOM_TREE_NODE),
            "::",
            stringify!(atom)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).re_nodes) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(YR_ATOM_TREE_NODE),
            "::",
            stringify!(re_nodes)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).children_head) as usize - ptr as usize },
        48usize,
        concat!(
            "Offset of field: ",
            stringify!(YR_ATOM_TREE_NODE),
            "::",
            stringify!(children_head)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).children_tail) as usize - ptr as usize },
        56usize,
        concat!(
            "Offset of field: ",
            stringify!(YR_ATOM_TREE_NODE),
            "::",
            stringify!(children_tail)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).next_sibling) as usize - ptr as usize },
        64usize,
        concat!(
            "Offset of field: ",
            stringify!(YR_ATOM_TREE_NODE),
            "::",
            stringify!(next_sibling)
        )
    );
}
impl Default for YR_ATOM_TREE_NODE {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct YR_ATOM_TREE {
    pub root_node: *mut YR_ATOM_TREE_NODE,
}
#[test]
fn bindgen_test_layout_YR_ATOM_TREE() {
    const UNINIT: ::std::mem::MaybeUninit<YR_ATOM_TREE> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<YR_ATOM_TREE>(),
        8usize,
        concat!("Size of: ", stringify!(YR_ATOM_TREE))
    );
    assert_eq!(
        ::std::mem::align_of::<YR_ATOM_TREE>(),
        8usize,
        concat!("Alignment of ", stringify!(YR_ATOM_TREE))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).root_node) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(YR_ATOM_TREE),
            "::",
            stringify!(root_node)
        )
    );
}
impl Default for YR_ATOM_TREE {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct YR_ATOM_LIST_ITEM {
    pub atom: YR_ATOM,
    pub backtrack: u16,
    pub forward_code_ref: YR_ARENA_REF,
    pub backward_code_ref: YR_ARENA_REF,
    pub next: *mut YR_ATOM_LIST_ITEM,
}
#[test]
fn bindgen_test_layout_YR_ATOM_LIST_ITEM() {
    const UNINIT: ::std::mem::MaybeUninit<YR_ATOM_LIST_ITEM> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<YR_ATOM_LIST_ITEM>(),
        40usize,
        concat!("Size of: ", stringify!(YR_ATOM_LIST_ITEM))
    );
    assert_eq!(
        ::std::mem::align_of::<YR_ATOM_LIST_ITEM>(),
        8usize,
        concat!("Alignment of ", stringify!(YR_ATOM_LIST_ITEM))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).atom) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(YR_ATOM_LIST_ITEM),
            "::",
            stringify!(atom)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).backtrack) as usize - ptr as usize },
        10usize,
        concat!(
            "Offset of field: ",
            stringify!(YR_ATOM_LIST_ITEM),
            "::",
            stringify!(backtrack)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).forward_code_ref) as usize - ptr as usize },
        12usize,
        concat!(
            "Offset of field: ",
            stringify!(YR_ATOM_LIST_ITEM),
            "::",
            stringify!(forward_code_ref)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).backward_code_ref) as usize - ptr as usize },
        20usize,
        concat!(
            "Offset of field: ",
            stringify!(YR_ATOM_LIST_ITEM),
            "::",
            stringify!(backward_code_ref)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).next) as usize - ptr as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(YR_ATOM_LIST_ITEM),
            "::",
            stringify!(next)
        )
    );
}
impl Default for YR_ATOM_LIST_ITEM {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C)]
#[derive(Debug, Default, Copy, Clone)]
pub struct YR_ATOM_QUALITY_TABLE_ENTRY {
    pub atom: [u8; 4usize],
    pub quality: u8,
}
#[test]
fn bindgen_test_layout_YR_ATOM_QUALITY_TABLE_ENTRY() {
    const UNINIT: ::std::mem::MaybeUninit<YR_ATOM_QUALITY_TABLE_ENTRY> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<YR_ATOM_QUALITY_TABLE_ENTRY>(),
        5usize,
        concat!("Size of: ", stringify!(YR_ATOM_QUALITY_TABLE_ENTRY))
    );
    assert_eq!(
        ::std::mem::align_of::<YR_ATOM_QUALITY_TABLE_ENTRY>(),
        1usize,
        concat!("Alignment of ", stringify!(YR_ATOM_QUALITY_TABLE_ENTRY))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).atom) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(YR_ATOM_QUALITY_TABLE_ENTRY),
            "::",
            stringify!(atom)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).quality) as usize - ptr as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(YR_ATOM_QUALITY_TABLE_ENTRY),
            "::",
            stringify!(quality)
        )
    );
}
pub type YR_ATOMS_QUALITY_FUNC = ::std::option::Option<
    unsafe extern "C" fn(config: *mut YR_ATOMS_CONFIG, atom: *mut YR_ATOM) -> ::std::os::raw::c_int,
>;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct YR_ATOMS_CONFIG {
    pub get_atom_quality: YR_ATOMS_QUALITY_FUNC,
    pub quality_table: *mut YR_ATOM_QUALITY_TABLE_ENTRY,
    pub quality_warning_threshold: ::std::os::raw::c_int,
    pub quality_table_entries: ::std::os::raw::c_int,
    pub free_quality_table: bool,
}
#[test]
fn bindgen_test_layout_YR_ATOMS_CONFIG() {
    const UNINIT: ::std::mem::MaybeUninit<YR_ATOMS_CONFIG> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<YR_ATOMS_CONFIG>(),
        32usize,
        concat!("Size of: ", stringify!(YR_ATOMS_CONFIG))
    );
    assert_eq!(
        ::std::mem::align_of::<YR_ATOMS_CONFIG>(),
        8usize,
        concat!("Alignment of ", stringify!(YR_ATOMS_CONFIG))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).get_atom_quality) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(YR_ATOMS_CONFIG),
            "::",
            stringify!(get_atom_quality)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).quality_table) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(YR_ATOMS_CONFIG),
            "::",
            stringify!(quality_table)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).quality_warning_threshold) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(YR_ATOMS_CONFIG),
            "::",
            stringify!(quality_warning_threshold)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).quality_table_entries) as usize - ptr as usize },
        20usize,
        concat!(
            "Offset of field: ",
            stringify!(YR_ATOMS_CONFIG),
            "::",
            stringify!(quality_table_entries)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).free_quality_table) as usize - ptr as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(YR_ATOMS_CONFIG),
            "::",
            stringify!(free_quality_table)
        )
    );
}
impl Default for YR_ATOMS_CONFIG {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
extern "C" {
    pub fn yr_atoms_extract_from_re(
        config: *mut YR_ATOMS_CONFIG,
        re_ast: *mut RE_AST,
        modifier: YR_MODIFIER,
        atoms: *mut *mut YR_ATOM_LIST_ITEM,
        min_atom_quality: *mut ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn yr_atoms_extract_from_string(
        config: *mut YR_ATOMS_CONFIG,
        string: *mut u8,
        string_length: ::std::os::raw::c_int,
        modifier: YR_MODIFIER,
        atoms: *mut *mut YR_ATOM_LIST_ITEM,
        min_atom_quality: *mut ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn yr_atoms_extract_triplets(
        re_node: *mut RE_NODE,
        atoms: *mut *mut YR_ATOM_LIST_ITEM,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn yr_atoms_heuristic_quality(
        config: *mut YR_ATOMS_CONFIG,
        atom: *mut YR_ATOM,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn yr_atoms_table_quality(
        config: *mut YR_ATOMS_CONFIG,
        atom: *mut YR_ATOM,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn yr_atoms_min_quality(
        config: *mut YR_ATOMS_CONFIG,
        atom_list: *mut YR_ATOM_LIST_ITEM,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn yr_atoms_list_destroy(list_head: *mut YR_ATOM_LIST_ITEM);
}
extern "C" {
    pub fn yr_ac_automaton_create(
        arena: *mut YR_ARENA,
        automaton: *mut *mut YR_AC_AUTOMATON,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn yr_ac_automaton_destroy(automaton: *mut YR_AC_AUTOMATON) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn yr_ac_add_string(
        automaton: *mut YR_AC_AUTOMATON,
        string: *mut YR_STRING,
        string_idx: u32,
        atom: *mut YR_ATOM_LIST_ITEM,
        arena: *mut YR_ARENA,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn yr_ac_compile(
        automaton: *mut YR_AC_AUTOMATON,
        arena: *mut YR_ARENA,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn yr_ac_print_automaton(automaton: *mut YR_AC_AUTOMATON);
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _YR_MAPPED_FILE {
    pub file: ::std::os::raw::c_int,
    pub size: usize,
    pub data: *const u8,
}
#[test]
fn bindgen_test_layout__YR_MAPPED_FILE() {
    const UNINIT: ::std::mem::MaybeUninit<_YR_MAPPED_FILE> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<_YR_MAPPED_FILE>(),
        24usize,
        concat!("Size of: ", stringify!(_YR_MAPPED_FILE))
    );
    assert_eq!(
        ::std::mem::align_of::<_YR_MAPPED_FILE>(),
        8usize,
        concat!("Alignment of ", stringify!(_YR_MAPPED_FILE))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).file) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_YR_MAPPED_FILE),
            "::",
            stringify!(file)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).size) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(_YR_MAPPED_FILE),
            "::",
            stringify!(size)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).data) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(_YR_MAPPED_FILE),
            "::",
            stringify!(data)
        )
    );
}
impl Default for _YR_MAPPED_FILE {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
pub type YR_MAPPED_FILE = _YR_MAPPED_FILE;
extern "C" {
    pub fn yr_filemap_map(
        file_path: *const ::std::os::raw::c_char,
        pmapped_file: *mut YR_MAPPED_FILE,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn yr_filemap_map_fd(
        file: ::std::os::raw::c_int,
        offset: u64,
        size: usize,
        pmapped_file: *mut YR_MAPPED_FILE,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn yr_filemap_map_ex(
        file_path: *const ::std::os::raw::c_char,
        offset: u64,
        size: usize,
        pmapped_file: *mut YR_MAPPED_FILE,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn yr_filemap_unmap(pmapped_file: *mut YR_MAPPED_FILE);
}
extern "C" {
    pub fn yr_filemap_unmap_fd(pmapped_file: *mut YR_MAPPED_FILE);
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct _YR_EXPRESSION {
    pub type_: ::std::os::raw::c_int,
    pub value: _YR_EXPRESSION__bindgen_ty_1,
    pub identifier: _YR_EXPRESSION__bindgen_ty_2,
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union _YR_EXPRESSION__bindgen_ty_1 {
    pub integer: i64,
    pub object: *mut YR_OBJECT,
    pub sized_string_ref: YR_ARENA_REF,
}
#[test]
fn bindgen_test_layout__YR_EXPRESSION__bindgen_ty_1() {
    const UNINIT: ::std::mem::MaybeUninit<_YR_EXPRESSION__bindgen_ty_1> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<_YR_EXPRESSION__bindgen_ty_1>(),
        8usize,
        concat!("Size of: ", stringify!(_YR_EXPRESSION__bindgen_ty_1))
    );
    assert_eq!(
        ::std::mem::align_of::<_YR_EXPRESSION__bindgen_ty_1>(),
        8usize,
        concat!("Alignment of ", stringify!(_YR_EXPRESSION__bindgen_ty_1))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).integer) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_YR_EXPRESSION__bindgen_ty_1),
            "::",
            stringify!(integer)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).object) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_YR_EXPRESSION__bindgen_ty_1),
            "::",
            stringify!(object)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).sized_string_ref) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_YR_EXPRESSION__bindgen_ty_1),
            "::",
            stringify!(sized_string_ref)
        )
    );
}
impl Default for _YR_EXPRESSION__bindgen_ty_1 {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _YR_EXPRESSION__bindgen_ty_2 {
    pub ptr: *const ::std::os::raw::c_char,
    pub ref_: YR_ARENA_REF,
}
#[test]
fn bindgen_test_layout__YR_EXPRESSION__bindgen_ty_2() {
    const UNINIT: ::std::mem::MaybeUninit<_YR_EXPRESSION__bindgen_ty_2> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<_YR_EXPRESSION__bindgen_ty_2>(),
        16usize,
        concat!("Size of: ", stringify!(_YR_EXPRESSION__bindgen_ty_2))
    );
    assert_eq!(
        ::std::mem::align_of::<_YR_EXPRESSION__bindgen_ty_2>(),
        8usize,
        concat!("Alignment of ", stringify!(_YR_EXPRESSION__bindgen_ty_2))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).ptr) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_YR_EXPRESSION__bindgen_ty_2),
            "::",
            stringify!(ptr)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).ref_) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(_YR_EXPRESSION__bindgen_ty_2),
            "::",
            stringify!(ref_)
        )
    );
}
impl Default for _YR_EXPRESSION__bindgen_ty_2 {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[test]
fn bindgen_test_layout__YR_EXPRESSION() {
    const UNINIT: ::std::mem::MaybeUninit<_YR_EXPRESSION> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<_YR_EXPRESSION>(),
        32usize,
        concat!("Size of: ", stringify!(_YR_EXPRESSION))
    );
    assert_eq!(
        ::std::mem::align_of::<_YR_EXPRESSION>(),
        8usize,
        concat!("Alignment of ", stringify!(_YR_EXPRESSION))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).type_) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_YR_EXPRESSION),
            "::",
            stringify!(type_)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).value) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(_YR_EXPRESSION),
            "::",
            stringify!(value)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).identifier) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(_YR_EXPRESSION),
            "::",
            stringify!(identifier)
        )
    );
}
impl Default for _YR_EXPRESSION {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
pub type YR_EXPRESSION = _YR_EXPRESSION;
pub type YR_COMPILER_CALLBACK_FUNC = ::std::option::Option<
    unsafe extern "C" fn(
        error_level: ::std::os::raw::c_int,
        file_name: *const ::std::os::raw::c_char,
        line_number: ::std::os::raw::c_int,
        rule: *const YR_RULE,
        message: *const ::std::os::raw::c_char,
        user_data: *mut ::std::os::raw::c_void,
    ),
>;
pub type YR_COMPILER_INCLUDE_CALLBACK_FUNC = ::std::option::Option<
    unsafe extern "C" fn(
        include_name: *const ::std::os::raw::c_char,
        calling_rule_filename: *const ::std::os::raw::c_char,
        calling_rule_namespace: *const ::std::os::raw::c_char,
        user_data: *mut ::std::os::raw::c_void,
    ) -> *const ::std::os::raw::c_char,
>;
pub type YR_COMPILER_INCLUDE_FREE_FUNC = ::std::option::Option<
    unsafe extern "C" fn(
        callback_result_ptr: *const ::std::os::raw::c_char,
        user_data: *mut ::std::os::raw::c_void,
    ),
>;
pub type YR_COMPILER_RE_AST_CALLBACK_FUNC = ::std::option::Option<
    unsafe extern "C" fn(
        rule: *const YR_RULE,
        string_identifier: *const ::std::os::raw::c_char,
        re_ast: *const RE_AST,
        user_data: *mut ::std::os::raw::c_void,
    ),
>;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _YR_FIXUP {
    pub ref_: YR_ARENA_REF,
    pub next: *mut _YR_FIXUP,
}
#[test]
fn bindgen_test_layout__YR_FIXUP() {
    const UNINIT: ::std::mem::MaybeUninit<_YR_FIXUP> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<_YR_FIXUP>(),
        16usize,
        concat!("Size of: ", stringify!(_YR_FIXUP))
    );
    assert_eq!(
        ::std::mem::align_of::<_YR_FIXUP>(),
        8usize,
        concat!("Alignment of ", stringify!(_YR_FIXUP))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).ref_) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_YR_FIXUP),
            "::",
            stringify!(ref_)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).next) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(_YR_FIXUP),
            "::",
            stringify!(next)
        )
    );
}
impl Default for _YR_FIXUP {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
pub type YR_FIXUP = _YR_FIXUP;
#[repr(C)]
#[derive(Copy, Clone)]
pub struct _YR_LOOP_CONTEXT {
    pub start_ref: YR_ARENA_REF,
    pub vars_count: ::std::os::raw::c_int,
    pub vars: [YR_EXPRESSION; 2usize],
    pub vars_internal_count: ::std::os::raw::c_int,
}
#[test]
fn bindgen_test_layout__YR_LOOP_CONTEXT() {
    const UNINIT: ::std::mem::MaybeUninit<_YR_LOOP_CONTEXT> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<_YR_LOOP_CONTEXT>(),
        88usize,
        concat!("Size of: ", stringify!(_YR_LOOP_CONTEXT))
    );
    assert_eq!(
        ::std::mem::align_of::<_YR_LOOP_CONTEXT>(),
        8usize,
        concat!("Alignment of ", stringify!(_YR_LOOP_CONTEXT))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).start_ref) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_YR_LOOP_CONTEXT),
            "::",
            stringify!(start_ref)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).vars_count) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(_YR_LOOP_CONTEXT),
            "::",
            stringify!(vars_count)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).vars) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(_YR_LOOP_CONTEXT),
            "::",
            stringify!(vars)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).vars_internal_count) as usize - ptr as usize },
        80usize,
        concat!(
            "Offset of field: ",
            stringify!(_YR_LOOP_CONTEXT),
            "::",
            stringify!(vars_internal_count)
        )
    );
}
impl Default for _YR_LOOP_CONTEXT {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
pub type YR_LOOP_CONTEXT = _YR_LOOP_CONTEXT;
#[repr(C)]
#[derive(Copy, Clone)]
pub struct _YR_COMPILER {
    pub arena: *mut YR_ARENA,
    pub current_rule_idx: u32,
    pub next_rule_idx: u32,
    pub current_string_idx: u32,
    pub current_namespace_idx: u32,
    pub current_meta_idx: u32,
    pub rules: *mut YR_RULES,
    pub errors: ::std::os::raw::c_int,
    pub current_line: ::std::os::raw::c_int,
    pub last_error: ::std::os::raw::c_int,
    pub last_error_line: ::std::os::raw::c_int,
    pub error_recovery: jmp_buf,
    pub automaton: *mut YR_AC_AUTOMATON,
    pub rules_table: *mut YR_HASH_TABLE,
    pub objects_table: *mut YR_HASH_TABLE,
    pub strings_table: *mut YR_HASH_TABLE,
    pub wildcard_identifiers_table: *mut YR_HASH_TABLE,
    pub sz_table: *mut YR_HASH_TABLE,
    pub fixup_stack_head: *mut YR_FIXUP,
    pub num_namespaces: ::std::os::raw::c_int,
    pub loop_: [YR_LOOP_CONTEXT; 4usize],
    pub loop_index: ::std::os::raw::c_int,
    pub loop_for_of_var_index: ::std::os::raw::c_int,
    pub file_name_stack: [*mut ::std::os::raw::c_char; 16usize],
    pub file_name_stack_ptr: ::std::os::raw::c_int,
    pub last_error_extra_info: [::std::os::raw::c_char; 256usize],
    pub lex_buf: [::std::os::raw::c_char; 8192usize],
    pub lex_buf_ptr: *mut ::std::os::raw::c_char,
    pub lex_buf_len: ::std::os::raw::c_ushort,
    pub include_base_dir: [::std::os::raw::c_char; 1024usize],
    pub user_data: *mut ::std::os::raw::c_void,
    pub incl_clbk_user_data: *mut ::std::os::raw::c_void,
    pub re_ast_clbk_user_data: *mut ::std::os::raw::c_void,
    pub callback: YR_COMPILER_CALLBACK_FUNC,
    pub include_callback: YR_COMPILER_INCLUDE_CALLBACK_FUNC,
    pub include_free: YR_COMPILER_INCLUDE_FREE_FUNC,
    pub re_ast_callback: YR_COMPILER_RE_AST_CALLBACK_FUNC,
    pub atoms_config: YR_ATOMS_CONFIG,
}
#[test]
fn bindgen_test_layout__YR_COMPILER() {
    const UNINIT: ::std::mem::MaybeUninit<_YR_COMPILER> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<_YR_COMPILER>(),
        10384usize,
        concat!("Size of: ", stringify!(_YR_COMPILER))
    );
    assert_eq!(
        ::std::mem::align_of::<_YR_COMPILER>(),
        8usize,
        concat!("Alignment of ", stringify!(_YR_COMPILER))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).arena) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_YR_COMPILER),
            "::",
            stringify!(arena)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).current_rule_idx) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(_YR_COMPILER),
            "::",
            stringify!(current_rule_idx)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).next_rule_idx) as usize - ptr as usize },
        12usize,
        concat!(
            "Offset of field: ",
            stringify!(_YR_COMPILER),
            "::",
            stringify!(next_rule_idx)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).current_string_idx) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(_YR_COMPILER),
            "::",
            stringify!(current_string_idx)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).current_namespace_idx) as usize - ptr as usize },
        20usize,
        concat!(
            "Offset of field: ",
            stringify!(_YR_COMPILER),
            "::",
            stringify!(current_namespace_idx)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).current_meta_idx) as usize - ptr as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(_YR_COMPILER),
            "::",
            stringify!(current_meta_idx)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).rules) as usize - ptr as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(_YR_COMPILER),
            "::",
            stringify!(rules)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).errors) as usize - ptr as usize },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(_YR_COMPILER),
            "::",
            stringify!(errors)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).current_line) as usize - ptr as usize },
        44usize,
        concat!(
            "Offset of field: ",
            stringify!(_YR_COMPILER),
            "::",
            stringify!(current_line)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).last_error) as usize - ptr as usize },
        48usize,
        concat!(
            "Offset of field: ",
            stringify!(_YR_COMPILER),
            "::",
            stringify!(last_error)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).last_error_line) as usize - ptr as usize },
        52usize,
        concat!(
            "Offset of field: ",
            stringify!(_YR_COMPILER),
            "::",
            stringify!(last_error_line)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).error_recovery) as usize - ptr as usize },
        56usize,
        concat!(
            "Offset of field: ",
            stringify!(_YR_COMPILER),
            "::",
            stringify!(error_recovery)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).automaton) as usize - ptr as usize },
        248usize,
        concat!(
            "Offset of field: ",
            stringify!(_YR_COMPILER),
            "::",
            stringify!(automaton)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).rules_table) as usize - ptr as usize },
        256usize,
        concat!(
            "Offset of field: ",
            stringify!(_YR_COMPILER),
            "::",
            stringify!(rules_table)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).objects_table) as usize - ptr as usize },
        264usize,
        concat!(
            "Offset of field: ",
            stringify!(_YR_COMPILER),
            "::",
            stringify!(objects_table)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).strings_table) as usize - ptr as usize },
        272usize,
        concat!(
            "Offset of field: ",
            stringify!(_YR_COMPILER),
            "::",
            stringify!(strings_table)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).wildcard_identifiers_table) as usize - ptr as usize },
        280usize,
        concat!(
            "Offset of field: ",
            stringify!(_YR_COMPILER),
            "::",
            stringify!(wildcard_identifiers_table)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).sz_table) as usize - ptr as usize },
        288usize,
        concat!(
            "Offset of field: ",
            stringify!(_YR_COMPILER),
            "::",
            stringify!(sz_table)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).fixup_stack_head) as usize - ptr as usize },
        296usize,
        concat!(
            "Offset of field: ",
            stringify!(_YR_COMPILER),
            "::",
            stringify!(fixup_stack_head)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).num_namespaces) as usize - ptr as usize },
        304usize,
        concat!(
            "Offset of field: ",
            stringify!(_YR_COMPILER),
            "::",
            stringify!(num_namespaces)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).loop_) as usize - ptr as usize },
        312usize,
        concat!(
            "Offset of field: ",
            stringify!(_YR_COMPILER),
            "::",
            stringify!(loop_)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).loop_index) as usize - ptr as usize },
        664usize,
        concat!(
            "Offset of field: ",
            stringify!(_YR_COMPILER),
            "::",
            stringify!(loop_index)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).loop_for_of_var_index) as usize - ptr as usize },
        668usize,
        concat!(
            "Offset of field: ",
            stringify!(_YR_COMPILER),
            "::",
            stringify!(loop_for_of_var_index)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).file_name_stack) as usize - ptr as usize },
        672usize,
        concat!(
            "Offset of field: ",
            stringify!(_YR_COMPILER),
            "::",
            stringify!(file_name_stack)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).file_name_stack_ptr) as usize - ptr as usize },
        800usize,
        concat!(
            "Offset of field: ",
            stringify!(_YR_COMPILER),
            "::",
            stringify!(file_name_stack_ptr)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).last_error_extra_info) as usize - ptr as usize },
        804usize,
        concat!(
            "Offset of field: ",
            stringify!(_YR_COMPILER),
            "::",
            stringify!(last_error_extra_info)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).lex_buf) as usize - ptr as usize },
        1060usize,
        concat!(
            "Offset of field: ",
            stringify!(_YR_COMPILER),
            "::",
            stringify!(lex_buf)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).lex_buf_ptr) as usize - ptr as usize },
        9256usize,
        concat!(
            "Offset of field: ",
            stringify!(_YR_COMPILER),
            "::",
            stringify!(lex_buf_ptr)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).lex_buf_len) as usize - ptr as usize },
        9264usize,
        concat!(
            "Offset of field: ",
            stringify!(_YR_COMPILER),
            "::",
            stringify!(lex_buf_len)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).include_base_dir) as usize - ptr as usize },
        9266usize,
        concat!(
            "Offset of field: ",
            stringify!(_YR_COMPILER),
            "::",
            stringify!(include_base_dir)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).user_data) as usize - ptr as usize },
        10296usize,
        concat!(
            "Offset of field: ",
            stringify!(_YR_COMPILER),
            "::",
            stringify!(user_data)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).incl_clbk_user_data) as usize - ptr as usize },
        10304usize,
        concat!(
            "Offset of field: ",
            stringify!(_YR_COMPILER),
            "::",
            stringify!(incl_clbk_user_data)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).re_ast_clbk_user_data) as usize - ptr as usize },
        10312usize,
        concat!(
            "Offset of field: ",
            stringify!(_YR_COMPILER),
            "::",
            stringify!(re_ast_clbk_user_data)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).callback) as usize - ptr as usize },
        10320usize,
        concat!(
            "Offset of field: ",
            stringify!(_YR_COMPILER),
            "::",
            stringify!(callback)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).include_callback) as usize - ptr as usize },
        10328usize,
        concat!(
            "Offset of field: ",
            stringify!(_YR_COMPILER),
            "::",
            stringify!(include_callback)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).include_free) as usize - ptr as usize },
        10336usize,
        concat!(
            "Offset of field: ",
            stringify!(_YR_COMPILER),
            "::",
            stringify!(include_free)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).re_ast_callback) as usize - ptr as usize },
        10344usize,
        concat!(
            "Offset of field: ",
            stringify!(_YR_COMPILER),
            "::",
            stringify!(re_ast_callback)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).atoms_config) as usize - ptr as usize },
        10352usize,
        concat!(
            "Offset of field: ",
            stringify!(_YR_COMPILER),
            "::",
            stringify!(atoms_config)
        )
    );
}
impl Default for _YR_COMPILER {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
pub type YR_COMPILER = _YR_COMPILER;
extern "C" {
    pub fn yr_compiler_create(compiler: *mut *mut YR_COMPILER) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn yr_compiler_destroy(compiler: *mut YR_COMPILER);
}
extern "C" {
    pub fn yr_compiler_set_callback(
        compiler: *mut YR_COMPILER,
        callback: YR_COMPILER_CALLBACK_FUNC,
        user_data: *mut ::std::os::raw::c_void,
    );
}
extern "C" {
    pub fn yr_compiler_set_include_callback(
        compiler: *mut YR_COMPILER,
        include_callback: YR_COMPILER_INCLUDE_CALLBACK_FUNC,
        include_free: YR_COMPILER_INCLUDE_FREE_FUNC,
        user_data: *mut ::std::os::raw::c_void,
    );
}
extern "C" {
    pub fn yr_compiler_set_re_ast_callback(
        compiler: *mut YR_COMPILER,
        re_ast_callback: YR_COMPILER_RE_AST_CALLBACK_FUNC,
        user_data: *mut ::std::os::raw::c_void,
    );
}
extern "C" {
    pub fn yr_compiler_set_atom_quality_table(
        compiler: *mut YR_COMPILER,
        table: *const ::std::os::raw::c_void,
        entries: ::std::os::raw::c_int,
        warning_threshold: ::std::os::raw::c_uchar,
    );
}
extern "C" {
    pub fn yr_compiler_load_atom_quality_table(
        compiler: *mut YR_COMPILER,
        filename: *const ::std::os::raw::c_char,
        warning_threshold: ::std::os::raw::c_uchar,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn yr_compiler_add_file(
        compiler: *mut YR_COMPILER,
        rules_file: *mut FILE,
        namespace_: *const ::std::os::raw::c_char,
        file_name: *const ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn yr_compiler_add_fd(
        compiler: *mut YR_COMPILER,
        rules_fd: ::std::os::raw::c_int,
        namespace_: *const ::std::os::raw::c_char,
        file_name: *const ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn yr_compiler_add_string(
        compiler: *mut YR_COMPILER,
        rules_string: *const ::std::os::raw::c_char,
        namespace_: *const ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn yr_compiler_get_error_message(
        compiler: *mut YR_COMPILER,
        buffer: *mut ::std::os::raw::c_char,
        buffer_size: ::std::os::raw::c_int,
    ) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn yr_compiler_get_current_file_name(
        compiler: *mut YR_COMPILER,
    ) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn yr_compiler_define_integer_variable(
        compiler: *mut YR_COMPILER,
        identifier: *const ::std::os::raw::c_char,
        value: i64,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn yr_compiler_define_boolean_variable(
        compiler: *mut YR_COMPILER,
        identifier: *const ::std::os::raw::c_char,
        value: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn yr_compiler_define_float_variable(
        compiler: *mut YR_COMPILER,
        identifier: *const ::std::os::raw::c_char,
        value: f64,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn yr_compiler_define_string_variable(
        compiler: *mut YR_COMPILER,
        identifier: *const ::std::os::raw::c_char,
        value: *const ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn yr_compiler_get_rules(
        compiler: *mut YR_COMPILER,
        rules: *mut *mut YR_RULES,
    ) -> ::std::os::raw::c_int;
}
pub const _YR_CONFIG_NAME_YR_CONFIG_STACK_SIZE: _YR_CONFIG_NAME = 0;
pub const _YR_CONFIG_NAME_YR_CONFIG_MAX_STRINGS_PER_RULE: _YR_CONFIG_NAME = 1;
pub const _YR_CONFIG_NAME_YR_CONFIG_MAX_MATCH_DATA: _YR_CONFIG_NAME = 2;
pub const _YR_CONFIG_NAME_YR_CONFIG_MAX_PROCESS_MEMORY_CHUNK: _YR_CONFIG_NAME = 3;
pub const _YR_CONFIG_NAME_YR_CONFIG_LAST: _YR_CONFIG_NAME = 4;
pub type _YR_CONFIG_NAME = ::std::os::raw::c_uint;
pub use self::_YR_CONFIG_NAME as YR_CONFIG_NAME;
extern "C" {
    pub fn yr_initialize() -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn yr_finalize() -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn yr_set_configuration(
        arg1: YR_CONFIG_NAME,
        arg2: *mut ::std::os::raw::c_void,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn yr_set_configuration_uint32(arg1: YR_CONFIG_NAME, arg2: u32) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn yr_set_configuration_uint64(arg1: YR_CONFIG_NAME, arg2: u64) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn yr_get_configuration(
        arg1: YR_CONFIG_NAME,
        arg2: *mut ::std::os::raw::c_void,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn yr_get_configuration_uint32(
        arg1: YR_CONFIG_NAME,
        arg2: *mut u32,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn yr_get_configuration_uint64(
        arg1: YR_CONFIG_NAME,
        arg2: *mut u64,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn yr_calloc(count: usize, size: usize) -> *mut ::std::os::raw::c_void;
}
extern "C" {
    pub fn yr_malloc(size: usize) -> *mut ::std::os::raw::c_void;
}
extern "C" {
    pub fn yr_realloc(ptr: *mut ::std::os::raw::c_void, size: usize)
        -> *mut ::std::os::raw::c_void;
}
extern "C" {
    pub fn yr_strdup(str_: *const ::std::os::raw::c_char) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn yr_strndup(str_: *const ::std::os::raw::c_char, n: usize)
        -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn yr_free(ptr: *mut ::std::os::raw::c_void);
}
extern "C" {
    pub fn yr_heap_alloc() -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn yr_heap_free() -> ::std::os::raw::c_int;
}
pub type YR_SCANNER = YR_SCAN_CONTEXT;
extern "C" {
    pub fn yr_scanner_create(
        rules: *mut YR_RULES,
        scanner: *mut *mut YR_SCANNER,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn yr_scanner_destroy(scanner: *mut YR_SCANNER);
}
extern "C" {
    pub fn yr_scanner_set_callback(
        scanner: *mut YR_SCANNER,
        callback: YR_CALLBACK_FUNC,
        user_data: *mut ::std::os::raw::c_void,
    );
}
extern "C" {
    pub fn yr_scanner_set_timeout(scanner: *mut YR_SCANNER, timeout: ::std::os::raw::c_int);
}
extern "C" {
    pub fn yr_scanner_set_flags(scanner: *mut YR_SCANNER, flags: ::std::os::raw::c_int);
}
extern "C" {
    pub fn yr_scanner_define_integer_variable(
        scanner: *mut YR_SCANNER,
        identifier: *const ::std::os::raw::c_char,
        value: i64,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn yr_scanner_define_boolean_variable(
        scanner: *mut YR_SCANNER,
        identifier: *const ::std::os::raw::c_char,
        value: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn yr_scanner_define_float_variable(
        scanner: *mut YR_SCANNER,
        identifier: *const ::std::os::raw::c_char,
        value: f64,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn yr_scanner_define_string_variable(
        scanner: *mut YR_SCANNER,
        identifier: *const ::std::os::raw::c_char,
        value: *const ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn yr_scanner_scan_mem_blocks(
        scanner: *mut YR_SCANNER,
        iterator: *mut YR_MEMORY_BLOCK_ITERATOR,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn yr_scanner_scan_mem(
        scanner: *mut YR_SCANNER,
        buffer: *const u8,
        buffer_size: usize,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn yr_scanner_scan_file(
        scanner: *mut YR_SCANNER,
        filename: *const ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn yr_scanner_scan_fd(
        scanner: *mut YR_SCANNER,
        fd: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn yr_scanner_scan_proc(
        scanner: *mut YR_SCANNER,
        pid: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn yr_scanner_last_error_rule(scanner: *mut YR_SCANNER) -> *mut YR_RULE;
}
extern "C" {
    pub fn yr_scanner_last_error_string(scanner: *mut YR_SCANNER) -> *mut YR_STRING;
}
extern "C" {
    pub fn yr_scanner_get_profiling_info(scanner: *mut YR_SCANNER) -> *mut YR_RULE_PROFILING_INFO;
}
extern "C" {
    pub fn yr_scanner_reset_profiling_info(scanner: *mut YR_SCANNER);
}
extern "C" {
    pub fn yr_scanner_print_profiling_info(scanner: *mut YR_SCANNER) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn yr_rules_scan_mem_blocks(
        rules: *mut YR_RULES,
        iterator: *mut YR_MEMORY_BLOCK_ITERATOR,
        flags: ::std::os::raw::c_int,
        callback: YR_CALLBACK_FUNC,
        user_data: *mut ::std::os::raw::c_void,
        timeout: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn yr_rules_scan_mem(
        rules: *mut YR_RULES,
        buffer: *const u8,
        buffer_size: usize,
        flags: ::std::os::raw::c_int,
        callback: YR_CALLBACK_FUNC,
        user_data: *mut ::std::os::raw::c_void,
        timeout: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn yr_rules_scan_file(
        rules: *mut YR_RULES,
        filename: *const ::std::os::raw::c_char,
        flags: ::std::os::raw::c_int,
        callback: YR_CALLBACK_FUNC,
        user_data: *mut ::std::os::raw::c_void,
        timeout: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn yr_rules_scan_fd(
        rules: *mut YR_RULES,
        fd: ::std::os::raw::c_int,
        flags: ::std::os::raw::c_int,
        callback: YR_CALLBACK_FUNC,
        user_data: *mut ::std::os::raw::c_void,
        timeout: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn yr_rules_scan_proc(
        rules: *mut YR_RULES,
        pid: ::std::os::raw::c_int,
        flags: ::std::os::raw::c_int,
        callback: YR_CALLBACK_FUNC,
        user_data: *mut ::std::os::raw::c_void,
        timeout: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn yr_rules_save(
        rules: *mut YR_RULES,
        filename: *const ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn yr_rules_save_stream(
        rules: *mut YR_RULES,
        stream: *mut YR_STREAM,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn yr_rules_load(
        filename: *const ::std::os::raw::c_char,
        rules: *mut *mut YR_RULES,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn yr_rules_load_stream(
        stream: *mut YR_STREAM,
        rules: *mut *mut YR_RULES,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn yr_rules_destroy(rules: *mut YR_RULES) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn yr_rules_define_integer_variable(
        rules: *mut YR_RULES,
        identifier: *const ::std::os::raw::c_char,
        value: i64,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn yr_rules_define_boolean_variable(
        rules: *mut YR_RULES,
        identifier: *const ::std::os::raw::c_char,
        value: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn yr_rules_define_float_variable(
        rules: *mut YR_RULES,
        identifier: *const ::std::os::raw::c_char,
        value: f64,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn yr_rules_define_string_variable(
        rules: *mut YR_RULES,
        identifier: *const ::std::os::raw::c_char,
        value: *const ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn yr_rules_get_stats(
        rules: *mut YR_RULES,
        stats: *mut YR_RULES_STATS,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn yr_rule_disable(rule: *mut YR_RULE);
}
extern "C" {
    pub fn yr_rule_enable(rule: *mut YR_RULE);
}
extern "C" {
    pub fn yr_rules_from_arena(
        arena: *mut YR_ARENA,
        rules: *mut *mut YR_RULES,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn yr_scan_verify_match(
        context: *mut YR_SCAN_CONTEXT,
        ac_match: *mut YR_AC_MATCH,
        data: *const u8,
        data_size: usize,
        data_base: u64,
        offset: usize,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn yr_execute_code(context: *mut YR_SCAN_CONTEXT) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn yr_object_create(
        type_: i8,
        identifier: *const ::std::os::raw::c_char,
        parent: *mut YR_OBJECT,
        object: *mut *mut YR_OBJECT,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn yr_object_set_canary(object: *mut YR_OBJECT, canary: ::std::os::raw::c_int);
}
extern "C" {
    pub fn yr_object_function_create(
        identifier: *const ::std::os::raw::c_char,
        arguments_fmt: *const ::std::os::raw::c_char,
        return_fmt: *const ::std::os::raw::c_char,
        func: YR_MODULE_FUNC,
        parent: *mut YR_OBJECT,
        function: *mut *mut YR_OBJECT,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn yr_object_from_external_variable(
        external: *mut YR_EXTERNAL_VARIABLE,
        object: *mut *mut YR_OBJECT,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn yr_object_destroy(object: *mut YR_OBJECT);
}
extern "C" {
    pub fn yr_object_copy(
        object: *mut YR_OBJECT,
        object_copy: *mut *mut YR_OBJECT,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn yr_object_lookup_field(
        object: *mut YR_OBJECT,
        field_name: *const ::std::os::raw::c_char,
    ) -> *mut YR_OBJECT;
}
extern "C" {
    pub fn yr_object_lookup(
        root: *mut YR_OBJECT,
        flags: ::std::os::raw::c_int,
        pattern: *const ::std::os::raw::c_char,
        ...
    ) -> *mut YR_OBJECT;
}
extern "C" {
    pub fn yr_object_has_undefined_value(
        object: *mut YR_OBJECT,
        field: *const ::std::os::raw::c_char,
        ...
    ) -> bool;
}
extern "C" {
    pub fn yr_object_get_float(
        object: *mut YR_OBJECT,
        field: *const ::std::os::raw::c_char,
        ...
    ) -> f64;
}
extern "C" {
    pub fn yr_object_get_integer(
        object: *mut YR_OBJECT,
        field: *const ::std::os::raw::c_char,
        ...
    ) -> i64;
}
extern "C" {
    pub fn yr_object_get_string(
        object: *mut YR_OBJECT,
        field: *const ::std::os::raw::c_char,
        ...
    ) -> *mut SIZED_STRING;
}
extern "C" {
    pub fn yr_object_set_integer(
        value: i64,
        object: *mut YR_OBJECT,
        field: *const ::std::os::raw::c_char,
        ...
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn yr_object_set_float(
        value: f64,
        object: *mut YR_OBJECT,
        field: *const ::std::os::raw::c_char,
        ...
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn yr_object_set_string(
        value: *const ::std::os::raw::c_char,
        len: usize,
        object: *mut YR_OBJECT,
        field: *const ::std::os::raw::c_char,
        ...
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn yr_object_array_length(object: *mut YR_OBJECT) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn yr_object_array_get_item(
        object: *mut YR_OBJECT,
        flags: ::std::os::raw::c_int,
        index: ::std::os::raw::c_int,
    ) -> *mut YR_OBJECT;
}
extern "C" {
    pub fn yr_object_array_set_item(
        object: *mut YR_OBJECT,
        item: *mut YR_OBJECT,
        index: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn yr_object_dict_get_item(
        object: *mut YR_OBJECT,
        flags: ::std::os::raw::c_int,
        key: *const ::std::os::raw::c_char,
    ) -> *mut YR_OBJECT;
}
extern "C" {
    pub fn yr_object_dict_set_item(
        object: *mut YR_OBJECT,
        item: *mut YR_OBJECT,
        key: *const ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn yr_object_structure_set_member(
        object: *mut YR_OBJECT,
        member: *mut YR_OBJECT,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn yr_object_get_root(object: *mut YR_OBJECT) -> *mut YR_OBJECT;
}
extern "C" {
    pub fn yr_object_print_data(
        object: *mut YR_OBJECT,
        indent: ::std::os::raw::c_int,
        print_identifier: ::std::os::raw::c_int,
    );
}
pub type YR_EXT_INITIALIZE_FUNC =
    ::std::option::Option<unsafe extern "C" fn(module: *mut YR_MODULE) -> ::std::os::raw::c_int>;
pub type YR_EXT_FINALIZE_FUNC =
    ::std::option::Option<unsafe extern "C" fn(module: *mut YR_MODULE) -> ::std::os::raw::c_int>;
pub type YR_EXT_DECLARATIONS_FUNC = ::std::option::Option<
    unsafe extern "C" fn(module_object: *mut YR_OBJECT) -> ::std::os::raw::c_int,
>;
pub type YR_EXT_LOAD_FUNC = ::std::option::Option<
    unsafe extern "C" fn(
        context: *mut YR_SCAN_CONTEXT,
        module_object: *mut YR_OBJECT,
        module_data: *mut ::std::os::raw::c_void,
        module_data_size: usize,
    ) -> ::std::os::raw::c_int,
>;
pub type YR_EXT_UNLOAD_FUNC = ::std::option::Option<
    unsafe extern "C" fn(module_object: *mut YR_OBJECT) -> ::std::os::raw::c_int,
>;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct YR_MODULE {
    pub name: *mut ::std::os::raw::c_char,
    pub declarations: YR_EXT_DECLARATIONS_FUNC,
    pub load: YR_EXT_LOAD_FUNC,
    pub unload: YR_EXT_UNLOAD_FUNC,
    pub initialize: YR_EXT_INITIALIZE_FUNC,
    pub finalize: YR_EXT_FINALIZE_FUNC,
}
#[test]
fn bindgen_test_layout_YR_MODULE() {
    const UNINIT: ::std::mem::MaybeUninit<YR_MODULE> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<YR_MODULE>(),
        48usize,
        concat!("Size of: ", stringify!(YR_MODULE))
    );
    assert_eq!(
        ::std::mem::align_of::<YR_MODULE>(),
        8usize,
        concat!("Alignment of ", stringify!(YR_MODULE))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).name) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(YR_MODULE),
            "::",
            stringify!(name)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).declarations) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(YR_MODULE),
            "::",
            stringify!(declarations)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).load) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(YR_MODULE),
            "::",
            stringify!(load)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).unload) as usize - ptr as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(YR_MODULE),
            "::",
            stringify!(unload)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).initialize) as usize - ptr as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(YR_MODULE),
            "::",
            stringify!(initialize)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).finalize) as usize - ptr as usize },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(YR_MODULE),
            "::",
            stringify!(finalize)
        )
    );
}
impl Default for YR_MODULE {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct YR_MODULE_IMPORT {
    pub module_name: *const ::std::os::raw::c_char,
    pub module_data: *mut ::std::os::raw::c_void,
    pub module_data_size: usize,
}
#[test]
fn bindgen_test_layout_YR_MODULE_IMPORT() {
    const UNINIT: ::std::mem::MaybeUninit<YR_MODULE_IMPORT> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<YR_MODULE_IMPORT>(),
        24usize,
        concat!("Size of: ", stringify!(YR_MODULE_IMPORT))
    );
    assert_eq!(
        ::std::mem::align_of::<YR_MODULE_IMPORT>(),
        8usize,
        concat!("Alignment of ", stringify!(YR_MODULE_IMPORT))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).module_name) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(YR_MODULE_IMPORT),
            "::",
            stringify!(module_name)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).module_data) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(YR_MODULE_IMPORT),
            "::",
            stringify!(module_data)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).module_data_size) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(YR_MODULE_IMPORT),
            "::",
            stringify!(module_data_size)
        )
    );
}
impl Default for YR_MODULE_IMPORT {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
extern "C" {
    pub fn yr_modules_initialize() -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn yr_modules_finalize() -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn yr_modules_do_declarations(
        module_name: *const ::std::os::raw::c_char,
        main_structure: *mut YR_OBJECT,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn yr_modules_load(
        module_name: *const ::std::os::raw::c_char,
        context: *mut YR_SCAN_CONTEXT,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn yr_modules_unload_all(context: *mut YR_SCAN_CONTEXT) -> ::std::os::raw::c_int;
}
pub type __builtin_va_list = *mut ::std::os::raw::c_char;
